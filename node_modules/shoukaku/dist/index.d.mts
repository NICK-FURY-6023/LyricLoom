import { EventEmitter } from 'events';
import Websocket from 'ws';

declare enum State {
    CONNECTING = 0,
    NEARLY = 1,
    CONNECTED = 2,
    RECONNECTING = 3,
    DISCONNECTING = 4,
    DISCONNECTED = 5
}
declare enum VoiceState {
    SESSION_READY = 0,
    SESSION_ID_MISSING = 1,
    SESSION_ENDPOINT_MISSING = 2,
    SESSION_FAILED_UPDATE = 3
}
declare enum OpCodes {
    PLAYER_UPDATE = "playerUpdate",
    STATS = "stats",
    EVENT = "event",
    READY = "ready"
}
declare const Versions: {
    REST_VERSION: number;
    WEBSOCKET_VERSION: number;
};
declare const ShoukakuDefaults: Required<ShoukakuOptions>;
declare const ShoukakuClientInfo: string;
declare const NodeDefaults: NodeOption;

declare const Constants_NodeDefaults: typeof NodeDefaults;
type Constants_OpCodes = OpCodes;
declare const Constants_OpCodes: typeof OpCodes;
declare const Constants_ShoukakuClientInfo: typeof ShoukakuClientInfo;
declare const Constants_ShoukakuDefaults: typeof ShoukakuDefaults;
type Constants_State = State;
declare const Constants_State: typeof State;
declare const Constants_Versions: typeof Versions;
type Constants_VoiceState = VoiceState;
declare const Constants_VoiceState: typeof VoiceState;
declare namespace Constants {
  export { Constants_NodeDefaults as NodeDefaults, Constants_OpCodes as OpCodes, Constants_ShoukakuClientInfo as ShoukakuClientInfo, Constants_ShoukakuDefaults as ShoukakuDefaults, Constants_State as State, Constants_Versions as Versions, Constants_VoiceState as VoiceState };
}

declare abstract class TypedEventEmitter<T extends Record<string, unknown[]>> extends EventEmitter {
    protected constructor();
    on<K extends Extract<keyof T, string> | symbol>(eventName: K, listener: (...args: T[Extract<K, string>]) => void): this;
    once<K extends Extract<keyof T, string> | symbol>(eventName: K, listener: (...args: T[Extract<K, string>]) => void): this;
    off<K extends Extract<keyof T, string> | symbol>(eventName: K, listener: (...args: T[Extract<K, string>]) => void): this;
    emit<K extends Extract<keyof T, string> | symbol>(eventName: K, ...args: T[Extract<K, string>]): boolean;
}
type Constructor<T> = new (...args: unknown[]) => T;
/**
 * Merge the default options to user input
 * @param def Default options
 * @param given User input
 * @returns Merged options
 */
declare function mergeDefault<T extends Record<string, any>>(def: T, given: T): Required<T>;
/**
 * Wait for a specific amount of time (timeout)
 * @param ms Time to wait in milliseconds
 * @returns A promise that resolves in x seconds
 */
declare function wait(ms: number): Promise<void>;

type Utils_Constructor<T> = Constructor<T>;
type Utils_TypedEventEmitter<T extends Record<string, unknown[]>> = TypedEventEmitter<T>;
declare const Utils_TypedEventEmitter: typeof TypedEventEmitter;
declare const Utils_mergeDefault: typeof mergeDefault;
declare const Utils_wait: typeof wait;
declare namespace Utils {
  export { type Utils_Constructor as Constructor, Utils_TypedEventEmitter as TypedEventEmitter, Utils_mergeDefault as mergeDefault, Utils_wait as wait };
}

/**
 * Represents the partial payload from a stateUpdate event
 */
interface StateUpdatePartial {
    channel_id?: string;
    session_id?: string;
    self_deaf: boolean;
    self_mute: boolean;
}
/**
 * Represents the payload from a serverUpdate event
 */
interface ServerUpdate {
    token: string;
    guild_id: string;
    endpoint: string;
}
/**
 * Represents a connection to a Discord voice channel
 */
declare class Connection extends EventEmitter {
    /**
     * The manager where this connection is on
     */
    manager: Shoukaku;
    /**
     * GuildId of the connection that is being managed by this instance
     */
    guildId: string;
    /**
     * VoiceChannelId of the connection that is being managed by this instance
     */
    channelId: string | null;
    /**
     * ShardId where this connection sends data on
     */
    shardId: number;
    /**
     * Mute status in connected voice channel
     */
    muted: boolean;
    /**
     * Deafen status in connected voice channel
     */
    deafened: boolean;
    /**
     * Id of the voice channel where this instance was connected before the current channelId
     */
    lastChannelId: string | null;
    /**
     * Id of the currently active voice channel connection
     */
    sessionId: string | null;
    /**
     * Region of connected voice channel
     */
    region: string | null;
    /**
     * Last region of the connected voice channel
     */
    lastRegion: string | null;
    /**
     * Cached serverUpdate event from Lavalink
     */
    serverUpdate: ServerUpdate | null;
    /**
     * Connection state
     */
    state: State;
    /**
     * @param manager The manager of this connection
     * @param options The options to pass in connection creation
     * @param options.guildId GuildId in which voice channel to connect to is located
     * @param options.shardId ShardId in which the guild exists
     * @param options.channelId ChannelId of voice channel to connect to
     * @param options.deaf Optional boolean value to specify whether to deafen the current bot user
     * @param options.mute Optional boolean value to specify whether to mute the current bot user
     */
    constructor(manager: Shoukaku, options: VoiceChannelOptions);
    /**
     * Set the deafen status for the current bot user
     * @param deaf Boolean value to indicate whether to deafen or undeafen
     * @defaultValue false
     */
    setDeaf(deaf?: boolean): void;
    /**
     * Set the mute status for the current bot user
     * @param mute Boolean value to indicate whether to mute or unmute
     * @defaultValue false
     */
    setMute(mute?: boolean): void;
    /**
     * Disconnect the current bot user from the connected voice channel
     * @internal
     */
    disconnect(): void;
    /**
     * Connect the current bot user to a voice channel
     * @internal
     */
    connect(): Promise<void>;
    /**
     * Updates SessionId, ChannelId, Deafen and Mute data of this instance
     * @param options
     * @param options.session_id Id of the current session
     * @param options.channel_id Id of the connected voice channel
     * @param options.self_deaf Boolean that indicates if the current bot user is deafened or not
     * @param options.self_mute Boolean that indicates if the current bot user is muted or not
     * @internal
     */
    setStateUpdate({ session_id, channel_id, self_deaf, self_mute }: StateUpdatePartial): void;
    /**
     * Sets the server update data for this connection
     * @internal
     */
    setServerUpdate(data: ServerUpdate): void;
    /**
     * Send voice data to discord
     * @internal
     */
    private sendVoiceUpdate;
    /**
     * Send data to Discord
     * @param data The data to send
     * @internal
     */
    private send;
    /**
     * Emits a debug log
     * @internal
     */
    private debug;
}

type TrackEndReason = 'finished' | 'loadFailed' | 'stopped' | 'replaced' | 'cleanup';
type PlayOptions = Omit<UpdatePlayerOptions, 'filters' | 'voice'>;
type ResumeOptions = Omit<UpdatePlayerOptions, 'track' | 'filters' | 'voice'>;
declare enum PlayerEventType {
    TRACK_START_EVENT = "TrackStartEvent",
    TRACK_END_EVENT = "TrackEndEvent",
    TRACK_EXCEPTION_EVENT = "TrackExceptionEvent",
    TRACK_STUCK_EVENT = "TrackStuckEvent",
    WEBSOCKET_CLOSED_EVENT = "WebSocketClosedEvent"
}
interface Band {
    band: number;
    gain: number;
}
interface KaraokeSettings {
    level?: number;
    monoLevel?: number;
    filterBand?: number;
    filterWidth?: number;
}
interface TimescaleSettings {
    speed?: number;
    pitch?: number;
    rate?: number;
}
interface FreqSettings {
    frequency?: number;
    depth?: number;
}
interface RotationSettings {
    rotationHz?: number;
}
interface DistortionSettings {
    sinOffset?: number;
    sinScale?: number;
    cosOffset?: number;
    cosScale?: number;
    tanOffset?: number;
    tanScale?: number;
    offset?: number;
    scale?: number;
}
interface ChannelMixSettings {
    leftToLeft?: number;
    leftToRight?: number;
    rightToLeft?: number;
    rightToRight?: number;
}
interface LowPassSettings {
    smoothing?: number;
}
interface PlayerEvent {
    op: OpCodes.EVENT;
    guildId: string;
}
interface TrackStartEvent extends PlayerEvent {
    type: PlayerEventType.TRACK_START_EVENT;
    track: Track;
}
interface TrackEndEvent extends PlayerEvent {
    type: PlayerEventType.TRACK_END_EVENT;
    track: Track;
    reason: TrackEndReason;
}
interface TrackStuckEvent extends PlayerEvent {
    type: PlayerEventType.TRACK_STUCK_EVENT;
    track: Track;
    thresholdMs: number;
}
interface TrackExceptionEvent extends PlayerEvent {
    type: PlayerEventType.TRACK_EXCEPTION_EVENT;
    exception: Exception;
}
interface WebSocketClosedEvent extends PlayerEvent {
    type: PlayerEventType.WEBSOCKET_CLOSED_EVENT;
    code: number;
    byRemote: boolean;
    reason: string;
}
interface PlayerUpdate {
    op: OpCodes.PLAYER_UPDATE;
    state: {
        connected: boolean;
        position: number;
        time: number;
        ping: number;
    };
    guildId: string;
}
interface FilterOptions {
    volume?: number;
    equalizer?: Band[];
    karaoke?: KaraokeSettings | null;
    timescale?: TimescaleSettings | null;
    tremolo?: FreqSettings | null;
    vibrato?: FreqSettings | null;
    rotation?: RotationSettings | null;
    distortion?: DistortionSettings | null;
    channelMix?: ChannelMixSettings | null;
    lowPass?: LowPassSettings | null;
}
type PlayerEvents = {
    /**
     * Emitted when the current playing track ends
     * @eventProperty
     */
    'end': [reason: TrackEndEvent];
    /**
     * Emitted when the current playing track gets stuck due to an error
     * @eventProperty
     */
    'stuck': [data: TrackStuckEvent];
    /**
     * Emitted when the current websocket connection is closed
     * @eventProperty
     */
    'closed': [reason: WebSocketClosedEvent];
    /**
     * Emitted when a new track starts
     * @eventProperty
     */
    'start': [data: TrackStartEvent];
    /**
     * Emitted when there is an error caused by the current playing track
     * @eventProperty
     */
    'exception': [reason: TrackExceptionEvent];
    /**
     * Emitted when the library manages to resume the player
     * @eventProperty
     */
    'resumed': [player: Player];
    /**
     * Emitted when a playerUpdate even is received from Lavalink
     * @eventProperty
     */
    'update': [data: PlayerUpdate];
};
/**
 * Wrapper object around Lavalink
 */
declare class Player extends TypedEventEmitter<PlayerEvents> {
    /**
     * GuildId of this player
     */
    readonly guildId: string;
    /**
     * Lavalink node this player is connected to
     */
    node: Node;
    /**
     * Base64 encoded data of the current track
     */
    track: string | null;
    /**
     * Global volume of the player
     */
    volume: number;
    /**
     * Pause status in current player
     */
    paused: boolean;
    /**
     * Ping represents the number of milliseconds between heartbeat and ack. Could be `-1` if not connected
     */
    ping: number;
    /**
     * Position in ms of current track
     */
    position: number;
    /**
     * Filters on current track
     */
    filters: FilterOptions;
    constructor(guildId: string, node: Node);
    get data(): UpdatePlayerInfo;
    /**
     * Move player to another node
     * @param name Name of node to move to, or the default ideal node
     * @returns true if the player was moved, false if not
     */
    move(name?: string): Promise<boolean>;
    /**
     * Destroys the player in remote lavalink side
     */
    destroy(): Promise<void>;
    /**
     * Play a new track
     */
    playTrack(playerOptions: PlayOptions, noReplace?: boolean): Promise<void>;
    /**
     * Stop the currently playing track
     */
    stopTrack(): Promise<void>;
    /**
     * Pause or unpause the currently playing track
     * @param paused Boolean value to specify whether to pause or unpause the current bot user
     */
    setPaused(paused?: boolean): Promise<void>;
    /**
     * Seek to a specific time in the currently playing track
     * @param position Position to seek to in milliseconds
     */
    seekTo(position: number): Promise<void>;
    /**
     * Sets the global volume of the player
     * @param volume Target volume 0-1000
     */
    setGlobalVolume(volume: number): Promise<void>;
    /**
     * Sets the filter volume of the player
     * @param volume Target volume 0.0-5.0
     */
    setFilterVolume(volume: number): Promise<void>;
    /**
     * Change the equalizer settings applied to the currently playing track
     * @param equalizer An array of objects that conforms to the Bands type that define volumes at different frequencies
     */
    setEqualizer(equalizer: Band[]): Promise<void>;
    /**
     * Change the karaoke settings applied to the currently playing track
     * @param karaoke An object that conforms to the KaraokeSettings type that defines a range of frequencies to mute
     */
    setKaraoke(karaoke?: KaraokeSettings): Promise<void>;
    /**
     * Change the timescale settings applied to the currently playing track
     * @param timescale An object that conforms to the TimescaleSettings type that defines the time signature to play the audio at
     */
    setTimescale(timescale?: TimescaleSettings): Promise<void>;
    /**
     * Change the tremolo settings applied to the currently playing track
     * @param tremolo An object that conforms to the FreqSettings type that defines an oscillation in volume
     */
    setTremolo(tremolo?: FreqSettings): Promise<void>;
    /**
     * Change the vibrato settings applied to the currently playing track
     * @param vibrato An object that conforms to the FreqSettings type that defines an oscillation in pitch
     */
    setVibrato(vibrato?: FreqSettings): Promise<void>;
    /**
     * Change the rotation settings applied to the currently playing track
     * @param rotation An object that conforms to the RotationSettings type that defines the frequency of audio rotating round the listener
     */
    setRotation(rotation?: RotationSettings): Promise<void>;
    /**
     * Change the distortion settings applied to the currently playing track
     * @param distortion An object that conforms to DistortionSettings that defines distortions in the audio
     * @returns The current player instance
     */
    setDistortion(distortion?: DistortionSettings): Promise<void>;
    /**
     * Change the channel mix settings applied to the currently playing track
     * @param channelMix An object that conforms to ChannelMixSettings that defines how much the left and right channels affect each other (setting all factors to 0.5 causes both channels to get the same audio)
     */
    setChannelMix(channelMix?: ChannelMixSettings): Promise<void>;
    /**
     * Change the low pass settings applied to the currently playing track
     * @param lowPass An object that conforms to LowPassSettings that defines the amount of suppression on higher frequencies
     */
    setLowPass(lowPass?: LowPassSettings): Promise<void>;
    /**
     * Change the all filter settings applied to the currently playing track
     * @param filters An object that conforms to FilterOptions that defines all filters to apply/modify
     */
    setFilters(filters: FilterOptions): Promise<void>;
    /**
     * Clear all filters applied to the currently playing track
     */
    clearFilters(): Promise<void>;
    /**
     * Resumes the current track
     * @param options An object that conforms to ResumeOptions that specify behavior on resuming
     * @param noReplace Set it to true if you don't want to replace the currently playing track
     */
    resume(options?: ResumeOptions, noReplace?: boolean): Promise<void>;
    /**
     * If you want to update the whole player yourself, sends raw update player info to lavalink
     * @param playerOptions Options to update the player data
     * @param noReplace Set it to true if you don't want to replace the currently playing track
     */
    update(playerOptions: UpdatePlayerOptions, noReplace?: boolean): Promise<void>;
    /**
     * Cleans this player instance
     * @internal
     */
    clean(): void;
    /**
     * Sends server update to lavalink
     * @internal
     */
    sendServerUpdate(connection: Connection): Promise<void>;
    /**
     * Handle player update data
     */
    onPlayerUpdate(json: PlayerUpdate): void;
    /**
     * Handle player events received from Lavalink
     * @param json JSON data from Lavalink
     * @internal
     */
    onPlayerEvent(json: TrackStartEvent | TrackEndEvent | TrackStuckEvent | TrackExceptionEvent | WebSocketClosedEvent): void;
}

type Severity = 'common' | 'suspicious' | 'fault';
declare enum LoadType {
    TRACK = "track",
    PLAYLIST = "playlist",
    SEARCH = "search",
    EMPTY = "empty",
    ERROR = "error"
}
interface Track {
    encoded: string;
    info: {
        identifier: string;
        isSeekable: boolean;
        author: string;
        length: number;
        isStream: boolean;
        position: number;
        title: string;
        uri?: string;
        artworkUrl?: string;
        isrc?: string;
        sourceName: string;
    };
    pluginInfo: unknown;
}
interface Playlist {
    encoded: string;
    info: {
        name: string;
        selectedTrack: number;
    };
    pluginInfo: unknown;
    tracks: Track[];
}
interface Exception {
    message: string;
    severity: Severity;
    cause: string;
}
interface TrackResult {
    loadType: LoadType.TRACK;
    data: Track;
}
interface PlaylistResult {
    loadType: LoadType.PLAYLIST;
    data: Playlist;
}
interface SearchResult {
    loadType: LoadType.SEARCH;
    data: Track[];
}
interface EmptyResult {
    loadType: LoadType.EMPTY;
    data: Record<string, never>;
}
interface ErrorResult {
    loadType: LoadType.ERROR;
    data: Exception;
}
type LavalinkResponse = TrackResult | PlaylistResult | SearchResult | EmptyResult | ErrorResult;
interface Address {
    address: string;
    failingTimestamp: number;
    failingTime: string;
}
interface RoutePlanner {
    class: null | 'RotatingIpRoutePlanner' | 'NanoIpRoutePlanner' | 'RotatingNanoIpRoutePlanner' | 'BalancingIpRoutePlanner';
    details: null | {
        ipBlock: {
            type: string;
            size: string;
        };
        failingAddresses: Address[];
        rotateIndex: string;
        ipIndex: string;
        currentAddress: string;
        blockIndex: string;
        currentAddressIndex: string;
    };
}
interface LavalinkPlayerVoice {
    token: string;
    endpoint: string;
    sessionId: string;
    connected?: boolean;
    ping?: number;
}
type LavalinkPlayerVoiceOptions = Omit<LavalinkPlayerVoice, 'connected' | 'ping'>;
interface LavalinkPlayer {
    guildId: string;
    track?: Track;
    volume: number;
    paused: boolean;
    voice: LavalinkPlayerVoice;
    filters: FilterOptions;
}
interface UpdatePlayerTrackOptions {
    encoded?: string | null;
    identifier?: string;
    userData?: unknown;
}
interface UpdatePlayerOptions {
    track?: UpdatePlayerTrackOptions;
    position?: number;
    endTime?: number;
    volume?: number;
    paused?: boolean;
    filters?: FilterOptions;
    voice?: LavalinkPlayerVoiceOptions;
}
interface UpdatePlayerInfo {
    guildId: string;
    playerOptions: UpdatePlayerOptions;
    noReplace?: boolean;
}
interface SessionInfo {
    resumingKey?: string;
    timeout: number;
}
interface FetchOptions {
    endpoint: string;
    options: {
        headers?: Record<string, string>;
        params?: Record<string, string>;
        method?: string;
        body?: Record<string, unknown>;
        [key: string]: unknown;
    };
}
/**
 * Wrapper around Lavalink REST API
 */
declare class Rest {
    /**
     * Node that initialized this instance
     */
    protected readonly node: Node;
    /**
     * URL of Lavalink
     */
    protected readonly url: string;
    /**
     * Credentials to access Lavalink
     */
    protected readonly auth: string;
    /**
     * @param node An instance of Node
     * @param options The options to initialize this rest class
     * @param options.name Name of this node
     * @param options.url URL of Lavalink
     * @param options.auth Credentials to access Lavalnk
     * @param options.secure Weather to use secure protocols or not
     * @param options.group Group of this node
     */
    constructor(node: Node, options: NodeOption);
    protected get sessionId(): string;
    /**
     * Resolve a track
     * @param identifier Track ID
     * @returns A promise that resolves to a Lavalink response
     */
    resolve(identifier: string): Promise<LavalinkResponse | undefined>;
    /**
     * Decode a track
     * @param track Encoded track
     * @returns Promise that resolves to a track
     */
    decode(track: string): Promise<Track | undefined>;
    /**
     * Gets all the player with the specified sessionId
     * @returns Promise that resolves to an array of Lavalink players
     */
    getPlayers(): Promise<LavalinkPlayer[]>;
    /**
     * Gets the player with the specified guildId
     * @returns Promise that resolves to a Lavalink player
     */
    getPlayer(guildId: string): Promise<LavalinkPlayer | undefined>;
    /**
     * Updates a Lavalink player
     * @param data SessionId from Discord
     * @returns Promise that resolves to a Lavalink player
     */
    updatePlayer(data: UpdatePlayerInfo): Promise<LavalinkPlayer | undefined>;
    /**
     * Deletes a Lavalink player
     * @param guildId guildId where this player is
     */
    destroyPlayer(guildId: string): Promise<void>;
    /**
     * Updates the session with a resume boolean and timeout
     * @param resuming Whether resuming is enabled for this session or not
     * @param timeout Timeout to wait for resuming
     * @returns Promise that resolves to a Lavalink player
     */
    updateSession(resuming?: boolean, timeout?: number): Promise<SessionInfo | undefined>;
    /**
     * Gets the status of this node
     * @returns Promise that resolves to a node stats response
     */
    stats(): Promise<Stats | undefined>;
    /**
     * Get routeplanner status from Lavalink
     * @returns Promise that resolves to a routeplanner response
     */
    getRoutePlannerStatus(): Promise<RoutePlanner | undefined>;
    /**
     * Release blacklisted IP address into pool of IPs
     * @param address IP address
     */
    unmarkFailedAddress(address: string): Promise<void>;
    /**
     * Get Lavalink info
     */
    getLavalinkInfo(): Promise<NodeInfo | undefined>;
    /**
     * Make a request to Lavalink
     * @param fetchOptions.endpoint Lavalink endpoint
     * @param fetchOptions.options Options passed to fetch
     * @throws `RestError` when encountering a Lavalink error response
     * @internal
     */
    protected fetch<T = unknown>(fetchOptions: FetchOptions): Promise<T | undefined>;
}
interface LavalinkRestError {
    timestamp: number;
    status: number;
    error: string;
    trace?: string;
    message: string;
    path: string;
}
declare class RestError extends Error {
    timestamp: number;
    status: number;
    error: string;
    trace?: string;
    path: string;
    constructor({ timestamp, status, error, trace, message, path }: LavalinkRestError);
}

interface Ready {
    op: OpCodes.READY;
    resumed: boolean;
    sessionId: string;
}
interface NodeMemory {
    reservable: number;
    used: number;
    free: number;
    allocated: number;
}
interface NodeFrameStats {
    sent: number;
    deficit: number;
    nulled: number;
}
interface NodeCpu {
    cores: number;
    systemLoad: number;
    lavalinkLoad: number;
}
interface Stats {
    op: OpCodes.STATS;
    players: number;
    playingPlayers: number;
    memory: NodeMemory;
    frameStats: NodeFrameStats | null;
    cpu: NodeCpu;
    uptime: number;
}
interface NodeInfoVersion {
    semver: string;
    major: number;
    minor: number;
    patch: number;
    preRelease?: string;
    build?: string;
}
interface NodeInfoGit {
    branch: string;
    commit: string;
    commitTime: number;
}
interface NodeInfoPlugin {
    name: string;
    version: string;
}
interface NodeInfo {
    version: NodeInfoVersion;
    buildTime: number;
    git: NodeInfoGit;
    jvm: string;
    lavaplayer: string;
    sourceManagers: string[];
    filters: string[];
    plugins: NodeInfoPlugin[];
}
interface ResumableHeaders {
    [key: string]: string;
    'Client-Name': string;
    'User-Agent': string;
    'Authorization': string;
    'User-Id': string;
    'Session-Id': string;
}
type NonResumableHeaders = Omit<ResumableHeaders, 'Session-Id'>;
type NodeEvents = {
    [K in keyof ShoukakuEvents]: ShoukakuEvents[K] extends [unknown, ...infer R] ? R : never;
};
/**
 * Represents a Lavalink node
 */
declare class Node extends TypedEventEmitter<NodeEvents> {
    /**
     * Shoukaku class
     */
    readonly manager: Shoukaku;
    /**
     * Lavalink rest API
     */
    readonly rest: Rest;
    /**
     * Name of this node
     */
    readonly name: string;
    /**
     * Group in which this node is contained
     */
    readonly group?: string;
    /**
     * URL of Lavalink
     */
    private readonly url;
    /**
     * Credentials to access Lavalink
     */
    private readonly auth;
    /**
     * The number of reconnects to Lavalink
     */
    reconnects: number;
    /**
     * The state of this connection
     */
    state: State;
    /**
     * Statistics from Lavalink
     */
    stats: Stats | null;
    /**
     * Information about lavalink node
    */
    info: NodeInfo | null;
    /**
     * Websocket instance
     */
    ws: Websocket | null;
    /**
     * SessionId of this Lavalink connection (not to be confused with Discord SessionId)
     */
    sessionId: string | null;
    /**
     * Boolean that represents if the node has initialized once
     */
    protected initialized: boolean;
    /**
     * Boolean that represents if this connection is destroyed
     */
    protected destroyed: boolean;
    /**
     * @param manager Shoukaku instance
     * @param options Options on creating this node
     * @param options.name Name of this node
     * @param options.url URL of Lavalink
     * @param options.auth Credentials to access Lavalnk
     * @param options.secure Whether to use secure protocols or not
     * @param options.group Group of this node
     */
    constructor(manager: Shoukaku, options: NodeOption);
    /**
     * Penalties for load balancing
     * @returns Penalty score
     * @internal @readonly
     */
    get penalties(): number;
    /**
     * If we should clean this node
     * @internal @readonly
     */
    private get shouldClean();
    /**
     * Connect to Lavalink
     */
    connect(): void;
    /**
     * Disconnect from Lavalink
     * @param code Status code
     * @param reason Reason for disconnect
     */
    disconnect(code: number, reason?: string): void;
    /**
     * Handle connection open event from Lavalink
     * @param response Response from Lavalink
     * @internal
     */
    private open;
    /**
     * Handle message from Lavalink
     * @param message JSON message
     * @internal
     */
    private message;
    /**
     * Handle closed event from lavalink
     * @param code Status close
     * @param reason Reason for connection close
     */
    private close;
    /**
     * To emit error events easily
     * @param error error message
     */
    error(error: Error): void;
    /**
     * Internal disconnect function
     * @internal
     */
    private internalDisconnect;
    /**
     * Destroys the websocket connection
     * @internal
     */
    private destroy;
    /**
     * Cleans and moves players to other nodes if possible
     * @internal
     */
    private clean;
    /**
     * Reconnect to Lavalink
     * @internal
     */
    private reconnect;
    /**
     * Tries to resume the players internally
     * @internal
     */
    private resumePlayers;
    /**
     * Tries to move the players to another node
     * @internal
     */
    private movePlayers;
}

interface Structures {
    /**
     * A custom structure that extends the Rest class
     */
    rest?: Constructor<Rest>;
    /**
     * A custom structure that extends the Player class
     */
    player?: Constructor<Player>;
}
interface NodeOption {
    /**
     * Name of the Lavalink node
     */
    name: string;
    /**
     * Lavalink node host and port without any prefix
     */
    url: string;
    /**
     * Credentials to access Lavalink
     */
    auth: string;
    /**
     * Whether to use secure protocols or not
     */
    secure?: boolean;
    /**
     * Name of the Lavalink node group
     */
    group?: string;
}
interface ShoukakuOptions {
    /**
     * Whether to resume a connection on disconnect to Lavalink (Server Side) (Note: DOES NOT RESUME WHEN THE LAVALINK SERVER DIES)
     */
    resume?: boolean;
    /**
     * Time to wait before lavalink starts to destroy the players of the disconnected client
     */
    resumeTimeout?: number;
    /**
     * Whether to resume the players by doing it in the library side (Client Side) (Note: TRIES TO RESUME REGARDLESS OF WHAT HAPPENED ON A LAVALINK SERVER)
     */
    resumeByLibrary?: boolean;
    /**
     * Number of times to try and reconnect to Lavalink before giving up
     */
    reconnectTries?: number;
    /**
     * Timeout before trying to reconnect
     */
    reconnectInterval?: number;
    /**
     * Time to wait for a response from the Lavalink REST API before giving up
     */
    restTimeout?: number;
    /**
     * Whether to move players to a different Lavalink node when a node disconnects
     */
    moveOnDisconnect?: boolean;
    /**
     * User Agent to use when making requests to Lavalink
     */
    userAgent?: string;
    /**
     * Custom structures for shoukaku to use
     */
    structures?: Structures;
    /**
     * Timeout before abort connection
     */
    voiceConnectionTimeout?: number;
    /**
     * Node Resolver to use if you want to customize it
     */
    nodeResolver?: (nodes: Map<string, Node>, connection?: Connection) => Node | undefined;
}
interface VoiceChannelOptions {
    guildId: string;
    shardId: number;
    channelId: string;
    deaf?: boolean;
    mute?: boolean;
}
type ShoukakuEvents = {
    /**
     * Emitted when reconnect tries are occurring and how many tries are left
     * @eventProperty
     */
    'reconnecting': [name: string, reconnectsLeft: number, reconnectInterval: number];
    /**
     * Emitted when data useful for debugging is produced
     * @eventProperty
     */
    'debug': [name: string, info: string];
    /**
     * Emitted when an error occurs
     * @eventProperty
     */
    'error': [name: string, error: Error];
    /**
     * Emitted when Shoukaku is ready to receive operations
     * @eventProperty
     */
    'ready': [name: string, lavalinkResume: boolean, libraryResume: boolean];
    /**
     * Emitted when a websocket connection to Lavalink closes
     * @eventProperty
     */
    'close': [name: string, code: number, reason: string];
    /**
     * Emitted when a websocket connection to Lavalink disconnects
     * @eventProperty
     */
    'disconnect': [name: string, count: number];
    /**
     * Emitted when a raw message is received from Lavalink
     * @eventProperty
     */
    'raw': [name: string, json: unknown];
};
/**
 * Main Shoukaku class
 */
declare class Shoukaku extends TypedEventEmitter<ShoukakuEvents> {
    /**
     * Discord library connector
     */
    readonly connector: Connector;
    /**
     * Shoukaku options
     */
    readonly options: Required<ShoukakuOptions>;
    /**
     * Connected Lavalink nodes
     */
    readonly nodes: Map<string, Node>;
    /**
     * Voice connections being handled
     */
    readonly connections: Map<string, Connection>;
    /**
     * Players being handled
     */
    readonly players: Map<string, Player>;
    /**
     * Shoukaku instance identifier
     */
    id: string | null;
    /**
     * @param connector A Discord library connector
     * @param nodes An array that conforms to the NodeOption type that specifies nodes to connect to
     * @param options Options to pass to create this Shoukaku instance
     * @param options.resume Whether to resume a connection on disconnect to Lavalink (Server Side) (Note: DOES NOT RESUME WHEN THE LAVALINK SERVER DIES)
     * @param options.resumeTimeout Time to wait before lavalink starts to destroy the players of the disconnected client
     * @param options.resumeByLibrary Whether to resume the players by doing it in the library side (Client Side) (Note: TRIES TO RESUME REGARDLESS OF WHAT HAPPENED ON A LAVALINK SERVER)
     * @param options.reconnectTries Number of times to try and reconnect to Lavalink before giving up
     * @param options.reconnectInterval Timeout before trying to reconnect
     * @param options.restTimeout Time to wait for a response from the Lavalink REST API before giving up
     * @param options.moveOnDisconnect Whether to move players to a different Lavalink node when a node disconnects
     * @param options.userAgent User Agent to use when making requests to Lavalink
     * @param options.structures Custom structures for shoukaku to use
     * @param options.nodeResolver Used if you have custom lavalink node resolving
     */
    constructor(connector: Connector, nodes: NodeOption[], options?: ShoukakuOptions);
    /**
     * Gets an ideal node based on the nodeResolver you provided
     * @param connection Optional connection class for ideal node selection, if you use it
     * @returns An ideal node for you to do things with
     */
    getIdealNode(connection?: Connection): Node | undefined;
    /**
     * Add a Lavalink node to the pool of available nodes
     * @param options.name Name of this node
     * @param options.url URL of Lavalink
     * @param options.auth Credentials to access Lavalnk
     * @param options.secure Whether to use secure protocols or not
     * @param options.group Group of this node
     */
    addNode(options: NodeOption): void;
    /**
     * Remove a Lavalink node from the pool of available nodes
     * @param name Name of the node
     * @param reason Reason of removing the node
     */
    removeNode(name: string, reason?: string): void;
    /**
     * Joins a voice channel
     * @param options.guildId GuildId in which the ChannelId of the voice channel is located
     * @param options.shardId ShardId to track where this should send on sharded websockets, put 0 if you are unsharded
     * @param options.channelId ChannelId of the voice channel you want to connect to
     * @param options.deaf Optional boolean value to specify whether to deafen or undeafen the current bot user
     * @param options.mute Optional boolean value to specify whether to mute or unmute the current bot user
     * @returns The created player
     */
    joinVoiceChannel(options: VoiceChannelOptions): Promise<Player>;
    /**
     * Leaves a voice channel
     * @param guildId The id of the guild you want to delete
     * @returns The destroyed / disconnected player or undefined if none
     */
    leaveVoiceChannel(guildId: string): Promise<void>;
    /**
     * Cleans the disconnected lavalink node
     * @param node The node to clean
     * @param args Additional arguments for Shoukaku to emit
     * @returns A Lavalink node or undefined
     * @internal
     */
    private clean;
}

interface ConnectorMethods {
    sendPacket: any;
    getId: any;
}
declare const AllowedPackets: string[];
declare abstract class Connector {
    protected readonly client: any;
    protected manager: Shoukaku | null;
    constructor(client: any);
    set(manager: Shoukaku): Connector;
    protected ready(nodes: NodeOption[]): void;
    protected raw(packet: any): void;
    abstract getId(): string;
    abstract sendPacket(shardId: number, payload: unknown, important: boolean): void;
    abstract listen(nodes: NodeOption[]): void;
}

declare class DiscordJS extends Connector {
    sendPacket(shardId: number, payload: any, important: boolean): void;
    getId(): string;
    listen(nodes: NodeOption[]): void;
}

declare class Eris extends Connector {
    sendPacket(shardId: number, payload: any, important: boolean): void;
    getId(): string;
    listen(nodes: NodeOption[]): void;
}

declare class OceanicJS extends Connector {
    sendPacket(shardId: number, payload: any, important: boolean): void;
    getId(): string;
    listen(nodes: NodeOption[]): void;
}

declare class Seyfert extends Connector {
    sendPacket(shardId: number, payload: unknown, important: boolean): void;
    getId(): string;
    listen(nodes: NodeOption[]): void;
}

type index_DiscordJS = DiscordJS;
declare const index_DiscordJS: typeof DiscordJS;
type index_Eris = Eris;
declare const index_Eris: typeof Eris;
type index_OceanicJS = OceanicJS;
declare const index_OceanicJS: typeof OceanicJS;
type index_Seyfert = Seyfert;
declare const index_Seyfert: typeof Seyfert;
declare namespace index {
  export { index_DiscordJS as DiscordJS, index_Eris as Eris, index_OceanicJS as OceanicJS, index_Seyfert as Seyfert };
}

export { type Address, AllowedPackets, type Band, type ChannelMixSettings, Connection, Connector, type ConnectorMethods, index as Connectors, Constants, type DistortionSettings, type EmptyResult, type ErrorResult, type Exception, type FilterOptions, type FreqSettings, type KaraokeSettings, type LavalinkPlayer, type LavalinkPlayerVoice, type LavalinkPlayerVoiceOptions, type LavalinkResponse, LoadType, type LowPassSettings, Node, type NodeCpu, type NodeEvents, type NodeFrameStats, type NodeInfo, type NodeInfoGit, type NodeInfoPlugin, type NodeInfoVersion, type NodeMemory, type NodeOption, type NonResumableHeaders, type PlayOptions, Player, type PlayerEvent, PlayerEventType, type PlayerEvents, type PlayerUpdate, type Playlist, type PlaylistResult, type Ready, Rest, RestError, type ResumableHeaders, type ResumeOptions, type RotationSettings, type RoutePlanner, type SearchResult, type ServerUpdate, type SessionInfo, type Severity, Shoukaku, type ShoukakuEvents, type ShoukakuOptions, type StateUpdatePartial, type Stats, type Structures, type TimescaleSettings, type Track, type TrackEndEvent, type TrackEndReason, type TrackExceptionEvent, type TrackResult, type TrackStartEvent, type TrackStuckEvent, type UpdatePlayerInfo, type UpdatePlayerOptions, type UpdatePlayerTrackOptions, Utils, type VoiceChannelOptions, type WebSocketClosedEvent };
