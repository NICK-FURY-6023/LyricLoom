{"version":3,"sources":["../index.ts","../src/connectors/libs/index.ts","../src/Constants.ts","../package.json","../src/Utils.ts","../src/connectors/Connector.ts","../src/connectors/libs/DiscordJS.ts","../src/connectors/libs/Eris.ts","../src/connectors/libs/OceanicJS.ts","../src/connectors/libs/Seyfert.ts","../src/guild/Connection.ts","../src/guild/Player.ts","../src/node/Rest.ts","../src/node/Node.ts","../src/Shoukaku.ts"],"sourcesContent":["export * as Connectors from './src/connectors/libs';\nexport * as Constants from './src/Constants';\nexport * as Utils from './src/Utils';\nexport * from './src/connectors/Connector';\nexport * from './src/guild/Connection';\nexport * from './src/guild/Player';\nexport * from './src/node/Node';\nexport * from './src/node/Rest';\nexport * from './src/Shoukaku';\n","export * from './DiscordJS';\nexport * from './Eris';\nexport * from './OceanicJS';\nexport * from './Seyfert';\n","import Info from '../package.json';\nimport { NodeOption, ShoukakuOptions } from './Shoukaku';\n\nexport enum State {\n\tCONNECTING,\n\tNEARLY,\n\tCONNECTED,\n\tRECONNECTING,\n\tDISCONNECTING,\n\tDISCONNECTED\n}\n\nexport enum VoiceState {\n\tSESSION_READY,\n\tSESSION_ID_MISSING,\n\tSESSION_ENDPOINT_MISSING,\n\tSESSION_FAILED_UPDATE\n}\n\nexport enum OpCodes {\n\tPLAYER_UPDATE = 'playerUpdate',\n\tSTATS = 'stats',\n\tEVENT = 'event',\n\tREADY = 'ready'\n}\n\nexport const Versions = {\n\tREST_VERSION: 4,\n\tWEBSOCKET_VERSION: 4\n};\n\nexport const ShoukakuDefaults: Required<ShoukakuOptions> = {\n\tresume: false,\n\tresumeTimeout: 30,\n\tresumeByLibrary: false,\n\treconnectTries: 3,\n\treconnectInterval: 5,\n\trestTimeout: 60,\n\tmoveOnDisconnect: false,\n\tuserAgent: 'Discord Bot/unknown (https://github.com/shipgirlproject/Shoukaku.git)',\n\tstructures: {},\n\tvoiceConnectionTimeout: 15,\n\tnodeResolver: (nodes) => [ ...nodes.values() ]\n\t\t.filter(node => node.state === State.CONNECTED)\n\t\t.sort((a, b) => a.penalties - b.penalties)\n\t\t.shift()\n};\n\nexport const ShoukakuClientInfo = `${Info.name}/${Info.version} (${Info.repository.url})`;\n\nexport const NodeDefaults: NodeOption = {\n\tname: 'Default',\n\turl: '',\n\tauth: '',\n\tsecure: false,\n\tgroup: undefined\n};\n","{\n  \"name\": \"shoukaku\",\n  \"version\": \"4.1.1\",\n  \"description\": \"A stable and updated wrapper around Lavalink\",\n  \"main\": \"dist/index.js\",\n  \"module\": \"dist/index.mjs\",\n  \"types\": \"dist/index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"import\": \"./dist/index.mjs\",\n      \"require\": \"./dist/index.js\"\n    }\n  },\n  \"scripts\": {\n    \"build\": \"npm run build:ts && npm run build:docs\",\n    \"build:ts\": \"tsup --config tsup-config.json\",\n    \"build:docs\": \"typedoc --theme default --readme README.md --out docs/ --entryPointStrategy expand src/.\",\n    \"lint\": \"eslint .\",\n    \"prepare\": \"npm run build:ts\"\n  },\n  \"keywords\": [\n    \"bot\",\n    \"music\",\n    \"lavalink\",\n    \"api\",\n    \"discord\",\n    \"lavalink.js\",\n    \"discord.js\",\n    \"lavalink-api\",\n    \"weeb-library\"\n  ],\n  \"engines\": {\n    \"node\": \">=18.0.0\",\n    \"npm\": \">=7.0.0\"\n  },\n  \"author\": \"Saya\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/shipgirlproject/Shoukaku.git\"\n  },\n  \"dependencies\": {\n    \"ws\": \"^8.18.0\"\n  },\n  \"devDependencies\": {\n    \"@shipgirl/eslint-config\": \"^0.2.2\",\n    \"@types/node\": \"^22.2.0\",\n    \"@types/ws\": \"^8.5.12\",\n    \"eslint\": \"^9.9.0\",\n    \"tsup\": \"^8.2.4\",\n    \"typedoc\": \"^0.26.5\",\n    \"typescript\": \"^5.5.4\"\n  }\n}\n","import { EventEmitter } from 'events';\n\n// https://stackoverflow.com/a/67244127\nexport abstract class TypedEventEmitter<T extends Record<string, unknown[]>> extends EventEmitter {\n\tprotected constructor() {\n\t\tsuper();\n\t}\n\n\ton<K extends Extract<keyof T, string> | symbol>(eventName: K, listener: (...args: T[Extract<K, string>]) => void): this {\n\t\treturn super.on(eventName, listener);\n\t}\n\n\tonce<K extends Extract<keyof T, string> | symbol>(eventName: K, listener: (...args: T[Extract<K, string>]) => void): this {\n\t\treturn super.once(eventName, listener);\n\t}\n\n\toff<K extends Extract<keyof T, string> | symbol>(eventName: K, listener: (...args: T[Extract<K, string>]) => void): this {\n\t\treturn super.off(eventName, listener);\n\t}\n\n\temit<K extends Extract<keyof T, string> | symbol>(eventName: K, ...args: T[Extract<K, string>]): boolean {\n\t\treturn super.emit(eventName, ...args);\n\t}\n}\n\nexport type Constructor<T> = new (...args: unknown[]) => T;\n\n/**\n * Merge the default options to user input\n * @param def Default options\n * @param given User input\n * @returns Merged options\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function mergeDefault<T extends Record<string, any>>(def: T, given: T): Required<T> {\n\tif (!given) return def as Required<T>;\n\tconst defaultKeys: (keyof T)[] = Object.keys(def);\n\tfor (const key in given) {\n\t\tif (defaultKeys.includes(key)) continue;\n\t\tdelete given[key];\n\t}\n\tfor (const key of defaultKeys) {\n\t\tif (def[key] === null || (typeof def[key] === 'string' && def[key].length === 0)) {\n\t\t\tif (!given[key]) throw new Error(`${String(key)} was not found from the given options.`);\n\t\t}\n\t\tif (given[key] === null || given[key] === undefined) given[key] = def[key];\n\t}\n\treturn given as Required<T>;\n}\n\n/**\n * Wait for a specific amount of time (timeout)\n * @param ms Time to wait in milliseconds\n * @returns A promise that resolves in x seconds\n */\nexport function wait(ms: number): Promise<void> {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\nimport { NodeOption, Shoukaku } from '../Shoukaku';\nimport { NodeDefaults } from '../Constants';\nimport { mergeDefault } from '../Utils';\nimport { ServerUpdate, StateUpdatePartial } from '../guild/Connection';\n\nexport interface ConnectorMethods {\n\tsendPacket: any;\n\tgetId: any;\n}\n\nexport const AllowedPackets = [ 'VOICE_STATE_UPDATE', 'VOICE_SERVER_UPDATE' ];\n\nexport abstract class Connector {\n\tprotected readonly client: any;\n\tprotected manager: Shoukaku | null;\n\tconstructor(client: any) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\tthis.client = client;\n\t\tthis.manager = null;\n\t}\n\n\tpublic set(manager: Shoukaku): Connector {\n\t\tthis.manager = manager;\n\t\treturn this;\n\t}\n\n\tprotected ready(nodes: NodeOption[]): void {\n\t\tthis.manager!.id = this.getId();\n\t\tfor (const node of nodes) this.manager!.addNode(mergeDefault(NodeDefaults, node));\n\t}\n\n\tprotected raw(packet: any): void {\n\t\tif (!AllowedPackets.includes(packet.t as string)) return;\n\t\tconst guildId = packet.d.guild_id as string;\n\t\tconst connection = this.manager!.connections.get(guildId);\n\t\tif (!connection) return;\n\t\tif (packet.t === 'VOICE_SERVER_UPDATE') return connection.setServerUpdate(packet.d as ServerUpdate);\n\t\tconst userId = packet.d.user_id as string;\n\t\tif (userId !== this.manager!.id) return;\n\t\tconnection.setStateUpdate(packet.d as StateUpdatePartial);\n\t}\n\n\tabstract getId(): string;\n\n\tabstract sendPacket(shardId: number, payload: unknown, important: boolean): void;\n\n\tabstract listen(nodes: NodeOption[]): void;\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-explicit-any */\nimport { Connector } from '../Connector';\nimport { NodeOption } from '../../Shoukaku';\n\nexport class DiscordJS extends Connector {\n\t// sendPacket is where your library send packets to Discord Gateway\n\tpublic sendPacket(shardId: number, payload: any, important: boolean): void {\n\t\treturn this.client.ws.shards.get(shardId)?.send(payload, important);\n\t}\n\t// getId is a getter where the lib stores the client user (the one logged in as a bot) id\n\tpublic getId(): string {\n\t\treturn this.client.user.id;\n\t}\n\t// Listen attaches the event listener to the library you are using\n\tpublic listen(nodes: NodeOption[]): void {\n\t\t// Only attach to ready event once, refer to your library for its ready event\n\t\tthis.client.once('ready', () => this.ready(nodes));\n\t\t// Attach to the raw websocket event, this event must be 1:1 on spec with dapi (most libs implement this)\n\t\tthis.client.on('raw', (packet: any) => this.raw(packet));\n\t}\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-explicit-any */\nimport { Connector } from '../Connector';\nimport { NodeOption } from '../../Shoukaku';\n\nexport class Eris extends Connector {\n\t// sendPacket is where your library send packets to Discord Gateway\n\tpublic sendPacket(shardId: number, payload: any, important: boolean): void {\n\t\treturn this.client.shards.get(shardId)?.sendWS(payload.op, payload.d, important);\n\t}\n\t// getId is a getter where the lib stores the client user (the one logged in as a bot) id\n\tpublic getId(): string {\n\t\treturn this.client.user.id;\n\t}\n\t// Listen attaches the event listener to the library you are using\n\tpublic listen(nodes: NodeOption[]): void {\n\t\t// Only attach to ready event once, refer to your library for its ready event\n\t\tthis.client.once('ready', () => this.ready(nodes));\n\t\t// Attach to the raw websocket event, this event must be 1:1 on spec with dapi (most libs implement this)\n\t\tthis.client.on('rawWS', (packet: any) => this.raw(packet));\n\t}\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-explicit-any */\nimport { Connector } from '../Connector';\nimport { NodeOption } from '../../Shoukaku';\n\nexport class OceanicJS extends Connector {\n\t// sendPacket is where your library send packets to Discord Gateway\n\tpublic sendPacket(shardId: number, payload: any, important: boolean): void {\n\t\treturn this.client.shards.get(shardId)?.send(payload.op, payload.d, important);\n\t}\n\t// getId is a getter where the lib stores the client user (the one logged in as a bot) id\n\tpublic getId(): string {\n\t\treturn this.client.user.id;\n\t}\n\t// Listen attaches the event listener to the library you are using\n\tpublic listen(nodes: NodeOption[]): void {\n\t\t// Only attach to ready event once, refer to your library for its ready event\n\t\tthis.client.once('ready', () => this.ready(nodes));\n\t\t// Attach to the raw websocket event, this event must be 1:1 on spec with dapi (most libs implement this)\n\t\tthis.client.on('packet', (packet: any) => this.raw(packet));\n\t}\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-explicit-any */\nimport { Connector } from '../Connector';\nimport { NodeOption } from '../../Shoukaku';\n\nexport class Seyfert extends Connector {\n\t// sendPacket is where your library send packets to Discord Gateway\n\tpublic sendPacket(shardId: number, payload: unknown, important: boolean): void {\n\t\treturn this.client.gateway.send(shardId, payload);\n\t}\n\t// getId is a getter where the lib stores the client user (the one logged in as a bot) id\n\tpublic getId(): string {\n\t\treturn this.client.botId;\n\t}\n\t// Listen attaches the event listener to the library you are using\n\tpublic listen(nodes: NodeOption[]): void {\n\t\tthis.client.events.values.RAW = {\n\t\t\tdata: { name: 'raw' },\n\t\t\trun: (packet: any) => {\n\t\t\t\t// Only attach to ready event once, refer to your library for its ready event\n\t\t\t\tif (packet.t === 'READY') return this.ready(nodes);\n\t\t\t\t// Attach to the raw websocket event, this event must be 1:1 on spec with dapi (most libs implement this)\n\t\t\t\treturn this.raw(packet);\n\t\t\t}\n\t\t};\n\t}\n}\n","import { EventEmitter, once } from 'events';\nimport { State, VoiceState } from '../Constants';\nimport { Shoukaku, VoiceChannelOptions } from '../Shoukaku';\n\n/**\n * Represents the partial payload from a stateUpdate event\n */\nexport interface StateUpdatePartial {\n\tchannel_id?: string;\n\tsession_id?: string;\n\tself_deaf: boolean;\n\tself_mute: boolean;\n}\n\n/**\n * Represents the payload from a serverUpdate event\n */\nexport interface ServerUpdate {\n\ttoken: string;\n\tguild_id: string;\n\tendpoint: string;\n}\n\n/**\n * Represents a connection to a Discord voice channel\n */\nexport class Connection extends EventEmitter {\n\t/**\n     * The manager where this connection is on\n     */\n\tpublic manager: Shoukaku;\n\t/**\n     * GuildId of the connection that is being managed by this instance\n     */\n\tpublic guildId: string;\n\t/**\n     * VoiceChannelId of the connection that is being managed by this instance\n     */\n\tpublic channelId: string | null;\n\t/**\n     * ShardId where this connection sends data on\n     */\n\tpublic shardId: number;\n\t/**\n     * Mute status in connected voice channel\n     */\n\tpublic muted: boolean;\n\t/**\n     * Deafen status in connected voice channel\n     */\n\tpublic deafened: boolean;\n\t/**\n     * Id of the voice channel where this instance was connected before the current channelId\n     */\n\tpublic lastChannelId: string | null;\n\t/**\n     * Id of the currently active voice channel connection\n     */\n\tpublic sessionId: string | null;\n\t/**\n     * Region of connected voice channel\n     */\n\tpublic region: string | null;\n\t/**\n     * Last region of the connected voice channel\n     */\n\tpublic lastRegion: string | null;\n\t/**\n     * Cached serverUpdate event from Lavalink\n     */\n\tpublic serverUpdate: ServerUpdate | null;\n\t/**\n     * Connection state\n     */\n\tpublic state: State;\n\t/**\n     * @param manager The manager of this connection\n     * @param options The options to pass in connection creation\n     * @param options.guildId GuildId in which voice channel to connect to is located\n     * @param options.shardId ShardId in which the guild exists\n     * @param options.channelId ChannelId of voice channel to connect to\n     * @param options.deaf Optional boolean value to specify whether to deafen the current bot user\n     * @param options.mute Optional boolean value to specify whether to mute the current bot user\n     */\n\tconstructor(manager: Shoukaku, options: VoiceChannelOptions) {\n\t\tsuper();\n\t\tthis.manager = manager;\n\t\tthis.guildId = options.guildId;\n\t\tthis.channelId = options.channelId;\n\t\tthis.shardId = options.shardId;\n\t\tthis.muted = options.mute ?? false;\n\t\tthis.deafened = options.deaf ?? false;\n\t\tthis.lastChannelId = null;\n\t\tthis.sessionId = null;\n\t\tthis.region = null;\n\t\tthis.lastRegion = null;\n\t\tthis.serverUpdate = null;\n\t\tthis.state = State.DISCONNECTED;\n\t}\n\n\t/**\n     * Set the deafen status for the current bot user\n     * @param deaf Boolean value to indicate whether to deafen or undeafen\n     * @defaultValue false\n     */\n\tpublic setDeaf(deaf = false): void {\n\t\tthis.deafened = deaf;\n\t\tthis.sendVoiceUpdate();\n\t}\n\n\t/**\n     * Set the mute status for the current bot user\n     * @param mute Boolean value to indicate whether to mute or unmute\n     * @defaultValue false\n     */\n\tpublic setMute(mute = false): void {\n\t\tthis.muted = mute;\n\t\tthis.sendVoiceUpdate();\n\t}\n\n\t/**\n     * Disconnect the current bot user from the connected voice channel\n     * @internal\n     */\n\tpublic disconnect(): void {\n\t\tif (this.state === State.DISCONNECTED) return;\n\t\tthis.channelId = null;\n\t\tthis.deafened = false;\n\t\tthis.muted = false;\n\t\tthis.removeAllListeners();\n\t\tthis.sendVoiceUpdate();\n\t\tthis.state = State.DISCONNECTED;\n\t\tthis.debug(`[Voice] -> [Node] & [Discord] : Connection Destroyed | Guild: ${this.guildId}`);\n\t}\n\n\t/**\n     * Connect the current bot user to a voice channel\n     * @internal\n     */\n\tpublic async connect(): Promise<void> {\n\t\tif (this.state === State.CONNECTING || this.state === State.CONNECTED) return;\n\n\t\tthis.state = State.CONNECTING;\n\t\tthis.sendVoiceUpdate();\n\t\tthis.debug(`[Voice] -> [Discord] : Requesting Connection | Guild: ${this.guildId}`);\n\n\t\tconst controller = new AbortController();\n\t\tconst timeout = setTimeout(() => controller.abort(), this.manager.options.voiceConnectionTimeout * 1000);\n\n\t\ttry {\n\t\t\tconst [ status ] = await once(this, 'connectionUpdate', { signal: controller.signal }) as [ VoiceState ];\n\t\t\tif (status !== VoiceState.SESSION_READY) {\n\t\t\t\tswitch (status) {\n\t\t\t\t\tcase VoiceState.SESSION_ID_MISSING: throw new Error('The voice connection is not established due to missing session id');\n\t\t\t\t\tcase VoiceState.SESSION_ENDPOINT_MISSING: throw new Error('The voice connection is not established due to missing connection endpoint');\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.state = State.CONNECTED;\n\t\t} catch (e: unknown) {\n\t\t\tconst error = e as Error;\n\t\t\tthis.debug(`[Voice] </- [Discord] : Request Connection Failed | Guild: ${this.guildId}`);\n\t\t\tif (error.name === 'AbortError')\n\t\t\t\tthrow new Error(`The voice connection is not established in ${this.manager.options.voiceConnectionTimeout} seconds`);\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t}\n\n\t/**\n     * Updates SessionId, ChannelId, Deafen and Mute data of this instance\n     * @param options\n     * @param options.session_id Id of the current session\n     * @param options.channel_id Id of the connected voice channel\n     * @param options.self_deaf Boolean that indicates if the current bot user is deafened or not\n     * @param options.self_mute Boolean that indicates if the current bot user is muted or not\n     * @internal\n     */\n\tpublic setStateUpdate({ session_id, channel_id, self_deaf, self_mute }: StateUpdatePartial): void {\n\t\tthis.lastChannelId = this.channelId?.repeat(1) ?? null;\n\t\tthis.channelId = channel_id ?? null;\n\n\t\tif (this.channelId && this.lastChannelId !== this.channelId) {\n\t\t\tthis.debug(`[Voice] <- [Discord] : Channel Moved | Old Channel: ${this.channelId} Guild: ${this.guildId}`);\n\t\t}\n\n\t\tif (!this.channelId) {\n\t\t\tthis.state = State.DISCONNECTED;\n\t\t\tthis.debug(`[Voice] <- [Discord] : Channel Disconnected | Guild: ${this.guildId}`);\n\t\t}\n\n\t\tthis.deafened = self_deaf;\n\t\tthis.muted = self_mute;\n\t\tthis.sessionId = session_id ?? null;\n\t\tthis.debug(`[Voice] <- [Discord] : State Update Received | Channel: ${this.channelId} Session ID: ${session_id} Guild: ${this.guildId}`);\n\t}\n\n\t/**\n     * Sets the server update data for this connection\n     * @internal\n     */\n\tpublic setServerUpdate(data: ServerUpdate): void {\n\t\tif (!data.endpoint) {\n\t\t\tthis.emit('connectionUpdate', VoiceState.SESSION_ENDPOINT_MISSING);\n\t\t\treturn;\n\t\t}\n\t\tif (!this.sessionId) {\n\t\t\tthis.emit('connectionUpdate', VoiceState.SESSION_ID_MISSING);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.lastRegion = this.region?.repeat(1) ?? null;\n\t\tthis.region = data.endpoint.split('.').shift()?.replace(/[0-9]/g, '') ?? null;\n\n\t\tif (this.region && this.lastRegion !== this.region) {\n\t\t\tthis.debug(`[Voice] <- [Discord] : Voice Region Moved | Old Region: ${this.lastRegion} New Region: ${this.region} Guild: ${this.guildId}`);\n\t\t}\n\n\t\tthis.serverUpdate = data;\n\t\tthis.emit('connectionUpdate', VoiceState.SESSION_READY);\n\t\tthis.debug(`[Voice] <- [Discord] : Server Update Received | Server: ${this.region} Guild: ${this.guildId}`);\n\t}\n\n\t/**\n     * Send voice data to discord\n     * @internal\n     */\n\tprivate sendVoiceUpdate() {\n\t\tthis.send({ guild_id: this.guildId, channel_id: this.channelId, self_deaf: this.deafened, self_mute: this.muted });\n\t}\n\n\t/**\n     * Send data to Discord\n     * @param data The data to send\n     * @internal\n     */\n\tprivate send(data: unknown): void {\n\t\tthis.manager.connector.sendPacket(this.shardId, { op: 4, d: data }, false);\n\t}\n\n\t/**\n     * Emits a debug log\n     * @internal\n     */\n\tprivate debug(message: string): void {\n\t\tthis.manager.emit('debug', this.constructor.name, message);\n\t}\n}\n","import { Node } from '../node/Node';\nimport { Connection } from './Connection';\nimport { OpCodes, State } from '../Constants';\nimport { Exception, Track, UpdatePlayerInfo, UpdatePlayerOptions } from '../node/Rest';\nimport { TypedEventEmitter } from '../Utils';\n\nexport type TrackEndReason = 'finished' | 'loadFailed' | 'stopped' | 'replaced' | 'cleanup';\nexport type PlayOptions = Omit<UpdatePlayerOptions, 'filters' | 'voice'>;\nexport type ResumeOptions = Omit<UpdatePlayerOptions, 'track' | 'filters' | 'voice'>;\n\nexport enum PlayerEventType {\n\tTRACK_START_EVENT = 'TrackStartEvent',\n\tTRACK_END_EVENT = 'TrackEndEvent',\n\tTRACK_EXCEPTION_EVENT = 'TrackExceptionEvent',\n\tTRACK_STUCK_EVENT = 'TrackStuckEvent',\n\tWEBSOCKET_CLOSED_EVENT = 'WebSocketClosedEvent'\n}\n\nexport interface Band {\n\tband: number;\n\tgain: number;\n}\n\nexport interface KaraokeSettings {\n\tlevel?: number;\n\tmonoLevel?: number;\n\tfilterBand?: number;\n\tfilterWidth?: number;\n}\n\nexport interface TimescaleSettings {\n\tspeed?: number;\n\tpitch?: number;\n\trate?: number;\n}\n\nexport interface FreqSettings {\n\tfrequency?: number;\n\tdepth?: number;\n}\n\nexport interface RotationSettings {\n\trotationHz?: number;\n}\n\nexport interface DistortionSettings {\n\tsinOffset?: number;\n\tsinScale?: number;\n\tcosOffset?: number;\n\tcosScale?: number;\n\ttanOffset?: number;\n\ttanScale?: number;\n\toffset?: number;\n\tscale?: number;\n}\n\nexport interface ChannelMixSettings {\n\tleftToLeft?: number;\n\tleftToRight?: number;\n\trightToLeft?: number;\n\trightToRight?: number;\n}\n\nexport interface LowPassSettings {\n\tsmoothing?: number;\n}\n\nexport interface PlayerEvent {\n\top: OpCodes.EVENT;\n\tguildId: string;\n}\n\nexport interface TrackStartEvent extends PlayerEvent {\n\ttype: PlayerEventType.TRACK_START_EVENT;\n\ttrack: Track;\n}\n\nexport interface TrackEndEvent extends PlayerEvent {\n\ttype: PlayerEventType.TRACK_END_EVENT;\n\ttrack: Track;\n\treason: TrackEndReason;\n}\n\nexport interface TrackStuckEvent extends PlayerEvent {\n\ttype: PlayerEventType.TRACK_STUCK_EVENT;\n\ttrack: Track;\n\tthresholdMs: number;\n}\n\nexport interface TrackExceptionEvent extends PlayerEvent {\n\ttype: PlayerEventType.TRACK_EXCEPTION_EVENT;\n\texception: Exception;\n}\n\nexport interface WebSocketClosedEvent extends PlayerEvent {\n\ttype: PlayerEventType.WEBSOCKET_CLOSED_EVENT;\n\tcode: number;\n\tbyRemote: boolean;\n\treason: string;\n}\n\nexport interface PlayerUpdate {\n\top: OpCodes.PLAYER_UPDATE;\n\tstate: {\n\t\tconnected: boolean;\n\t\tposition: number;\n\t\ttime: number;\n\t\tping: number;\n\t};\n\tguildId: string;\n}\n\nexport interface FilterOptions {\n\tvolume?: number;\n\tequalizer?: Band[];\n\tkaraoke?: KaraokeSettings | null;\n\ttimescale?: TimescaleSettings | null;\n\ttremolo?: FreqSettings | null;\n\tvibrato?: FreqSettings | null;\n\trotation?: RotationSettings | null;\n\tdistortion?: DistortionSettings | null;\n\tchannelMix?: ChannelMixSettings | null;\n\tlowPass?: LowPassSettings | null;\n}\n\n// Interfaces are not final, but types are, and therefore has an index signature\n// https://stackoverflow.com/a/64970740\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport type PlayerEvents = {\n\t/**\n\t * Emitted when the current playing track ends\n\t * @eventProperty\n\t */\n\t'end': [reason: TrackEndEvent];\n\t/**\n\t * Emitted when the current playing track gets stuck due to an error\n\t * @eventProperty\n\t */\n\t'stuck': [data: TrackStuckEvent];\n\t/**\n\t * Emitted when the current websocket connection is closed\n\t * @eventProperty\n\t */\n\t'closed': [reason: WebSocketClosedEvent];\n\t/**\n\t * Emitted when a new track starts\n\t * @eventProperty\n\t */\n\t'start': [data: TrackStartEvent];\n\t/**\n\t * Emitted when there is an error caused by the current playing track\n\t * @eventProperty\n\t */\n\t'exception': [reason: TrackExceptionEvent];\n\t/**\n\t * Emitted when the library manages to resume the player\n\t * @eventProperty\n\t */\n\t'resumed': [player: Player];\n\t/**\n\t * Emitted when a playerUpdate even is received from Lavalink\n\t * @eventProperty\n\t */\n\t'update': [data: PlayerUpdate];\n};\n\n/**\n * Wrapper object around Lavalink\n */\nexport class Player extends TypedEventEmitter<PlayerEvents> {\n\t/**\n\t * GuildId of this player\n\t */\n\tpublic readonly guildId: string;\n\t/**\n\t * Lavalink node this player is connected to\n\t */\n\tpublic node: Node;\n\t/**\n\t * Base64 encoded data of the current track\n\t */\n\tpublic track: string | null;\n\t/**\n\t * Global volume of the player\n\t */\n\tpublic volume: number;\n\t/**\n\t * Pause status in current player\n\t */\n\tpublic paused: boolean;\n\t/**\n\t * Ping represents the number of milliseconds between heartbeat and ack. Could be `-1` if not connected\n\t */\n\tpublic ping: number;\n\t/**\n\t * Position in ms of current track\n\t */\n\tpublic position: number;\n\t/**\n\t * Filters on current track\n\t */\n\tpublic filters: FilterOptions;\n\n\tconstructor(guildId: string, node: Node) {\n\t\tsuper();\n\t\tthis.guildId = guildId;\n\t\tthis.node = node;\n\t\tthis.track = null;\n\t\tthis.volume = 100;\n\t\tthis.paused = false;\n\t\tthis.position = 0;\n\t\tthis.ping = 0;\n\t\tthis.filters = {};\n\t}\n\n\tpublic get data(): UpdatePlayerInfo {\n\t\tconst connection = this.node.manager.connections.get(this.guildId)!;\n\t\treturn {\n\t\t\tguildId: this.guildId,\n\t\t\tplayerOptions: {\n\t\t\t\ttrack: {\n\t\t\t\t\tencoded: this.track\n\t\t\t\t},\n\t\t\t\tposition: this.position,\n\t\t\t\tpaused: this.paused,\n\t\t\t\tfilters: this.filters,\n\t\t\t\tvoice: {\n\t\t\t\t\ttoken: connection.serverUpdate!.token,\n\t\t\t\t\tendpoint: connection.serverUpdate!.endpoint,\n\t\t\t\t\tsessionId: connection.sessionId!\n\t\t\t\t},\n\t\t\t\tvolume: this.volume\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Move player to another node\n\t * @param name Name of node to move to, or the default ideal node\n\t * @returns true if the player was moved, false if not\n\t */\n\tpublic async move(name?: string): Promise<boolean> {\n\t\tconst connection = this.node.manager.connections.get(this.guildId);\n\t\tconst node = this.node.manager.nodes.get(name!) ?? this.node.manager.getIdealNode(connection);\n\n\t\tif (!node && ![ ...this.node.manager.nodes.values() ].some(node => node.state === State.CONNECTED))\n\t\t\tthrow new Error('No available nodes to move to');\n\n\t\tif (!node || node.name === this.node.name || node.state !== State.CONNECTED) return false;\n\n\t\tlet lastNode = this.node.manager.nodes.get(this.node.name);\n\t\tif (!lastNode || lastNode.state !== State.CONNECTED)\n\t\t\tlastNode = this.node.manager.getIdealNode(connection);\n\n\t\tawait this.destroy();\n\n\t\ttry {\n\t\t\tthis.node = node;\n\t\t\tawait this.resume();\n\t\t\treturn true;\n\t\t} catch {\n\t\t\tthis.node = lastNode!;\n\t\t\tawait this.resume();\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the player in remote lavalink side\n\t */\n\tpublic async destroy(): Promise<void> {\n\t\tawait this.node.rest.destroyPlayer(this.guildId);\n\t}\n\n\t/**\n\t * Play a new track\n\t */\n\tpublic playTrack(playerOptions: PlayOptions, noReplace = false): Promise<void> {\n\t\treturn this.update(playerOptions, noReplace);\n\t}\n\n\t/**\n\t * Stop the currently playing track\n\t */\n\tpublic stopTrack(): Promise<void> {\n\t\treturn this.update({ track: { encoded: null }, position: 0 });\n\t}\n\n\t/**\n\t * Pause or unpause the currently playing track\n\t * @param paused Boolean value to specify whether to pause or unpause the current bot user\n\t */\n\tpublic setPaused(paused = true): Promise<void> {\n\t\treturn this.update({ paused });\n\t}\n\n\t/**\n\t * Seek to a specific time in the currently playing track\n\t * @param position Position to seek to in milliseconds\n\t */\n\tpublic seekTo(position: number): Promise<void> {\n\t\treturn this.update({ position });\n\t}\n\n\t/**\n\t * Sets the global volume of the player\n\t * @param volume Target volume 0-1000\n\t */\n\tpublic setGlobalVolume(volume: number): Promise<void> {\n\t\treturn this.update({ volume });\n\t}\n\n\t/**\n\t * Sets the filter volume of the player\n\t * @param volume Target volume 0.0-5.0\n\t */\n\tasync setFilterVolume(volume: number): Promise<void> {\n\t\treturn this.setFilters({ volume });\n\t}\n\n\t/**\n\t * Change the equalizer settings applied to the currently playing track\n\t * @param equalizer An array of objects that conforms to the Bands type that define volumes at different frequencies\n\t */\n\tpublic async setEqualizer(equalizer: Band[]): Promise<void> {\n\t\treturn this.setFilters({ equalizer });\n\t}\n\n\t/**\n\t * Change the karaoke settings applied to the currently playing track\n\t * @param karaoke An object that conforms to the KaraokeSettings type that defines a range of frequencies to mute\n\t */\n\tpublic setKaraoke(karaoke?: KaraokeSettings): Promise<void> {\n\t\treturn this.setFilters({ karaoke: karaoke ?? null });\n\t}\n\n\t/**\n\t * Change the timescale settings applied to the currently playing track\n\t * @param timescale An object that conforms to the TimescaleSettings type that defines the time signature to play the audio at\n\t */\n\tpublic setTimescale(timescale?: TimescaleSettings): Promise<void> {\n\t\treturn this.setFilters({ timescale: timescale ?? null });\n\t}\n\n\t/**\n\t * Change the tremolo settings applied to the currently playing track\n\t * @param tremolo An object that conforms to the FreqSettings type that defines an oscillation in volume\n\t */\n\tpublic setTremolo(tremolo?: FreqSettings): Promise<void> {\n\t\treturn this.setFilters({ tremolo: tremolo ?? null });\n\t}\n\n\t/**\n\t * Change the vibrato settings applied to the currently playing track\n\t * @param vibrato An object that conforms to the FreqSettings type that defines an oscillation in pitch\n\t */\n\tpublic setVibrato(vibrato?: FreqSettings): Promise<void> {\n\t\treturn this.setFilters({ vibrato: vibrato ?? null });\n\t}\n\n\t/**\n\t * Change the rotation settings applied to the currently playing track\n\t * @param rotation An object that conforms to the RotationSettings type that defines the frequency of audio rotating round the listener\n\t */\n\tpublic setRotation(rotation?: RotationSettings): Promise<void> {\n\t\treturn this.setFilters({ rotation: rotation ?? null });\n\t}\n\n\t/**\n\t * Change the distortion settings applied to the currently playing track\n\t * @param distortion An object that conforms to DistortionSettings that defines distortions in the audio\n\t * @returns The current player instance\n\t */\n\tpublic setDistortion(distortion?: DistortionSettings): Promise<void> {\n\t\treturn this.setFilters({ distortion: distortion ?? null });\n\t}\n\n\t/**\n\t * Change the channel mix settings applied to the currently playing track\n\t * @param channelMix An object that conforms to ChannelMixSettings that defines how much the left and right channels affect each other (setting all factors to 0.5 causes both channels to get the same audio)\n\t */\n\tpublic setChannelMix(channelMix?: ChannelMixSettings): Promise<void> {\n\t\treturn this.setFilters({ channelMix: channelMix ?? null });\n\t}\n\n\t/**\n\t * Change the low pass settings applied to the currently playing track\n\t * @param lowPass An object that conforms to LowPassSettings that defines the amount of suppression on higher frequencies\n\t */\n\tpublic setLowPass(lowPass?: LowPassSettings): Promise<void> {\n\t\treturn this.setFilters({ lowPass: lowPass ?? null });\n\t}\n\n\t/**\n\t * Change the all filter settings applied to the currently playing track\n\t * @param filters An object that conforms to FilterOptions that defines all filters to apply/modify\n\t */\n\tpublic setFilters(filters: FilterOptions): Promise<void> {\n\t\treturn this.update({ filters });\n\t}\n\n\t/**\n\t * Clear all filters applied to the currently playing track\n\t */\n\tpublic clearFilters(): Promise<void> {\n\t\treturn this.setFilters({\n\t\t\tvolume: 1,\n\t\t\tequalizer: [],\n\t\t\tkaraoke: null,\n\t\t\ttimescale: null,\n\t\t\ttremolo: null,\n\t\t\tvibrato: null,\n\t\t\trotation: null,\n\t\t\tdistortion: null,\n\t\t\tchannelMix: null,\n\t\t\tlowPass: null\n\t\t});\n\t}\n\n\t/**\n\t * Resumes the current track\n\t * @param options An object that conforms to ResumeOptions that specify behavior on resuming\n\t * @param noReplace Set it to true if you don't want to replace the currently playing track\n\t */\n\tpublic async resume(options: ResumeOptions = {}, noReplace = false): Promise<void> {\n\t\tconst data = this.data;\n\n\t\tif (typeof options.position === 'number')\n\t\t\tdata.playerOptions.position = options.position;\n\t\tif (typeof options.endTime === 'number')\n\t\t\tdata.playerOptions.endTime = options.endTime;\n\t\tif (typeof options.paused === 'boolean')\n\t\t\tdata.playerOptions.paused = options.paused;\n\t\tif (typeof options.volume === 'number')\n\t\t\tdata.playerOptions.volume = options.volume;\n\n\t\tawait this.update(data.playerOptions, noReplace);\n\n\t\tthis.emit('resumed', this);\n\t}\n\n\t/**\n\t * If you want to update the whole player yourself, sends raw update player info to lavalink\n\t * @param playerOptions Options to update the player data\n\t * @param noReplace Set it to true if you don't want to replace the currently playing track\n\t */\n\tpublic async update(playerOptions: UpdatePlayerOptions, noReplace = false): Promise<void> {\n\t\tconst data = {\n\t\t\tguildId: this.guildId,\n\t\t\tnoReplace,\n\t\t\tplayerOptions\n\t\t};\n\n\t\tawait this.node.rest.updatePlayer(data);\n\n\t\tif (!noReplace) this.paused = false;\n\n\t\tif (playerOptions.filters) {\n\t\t\tthis.filters = { ...this.filters, ...playerOptions.filters };\n\t\t}\n\n\t\tif (typeof playerOptions.track !== 'undefined')\n\t\t\tthis.track = playerOptions.track.encoded ?? null;\n\t\tif (typeof playerOptions.paused === 'boolean')\n\t\t\tthis.paused = playerOptions.paused;\n\t\tif (typeof playerOptions.volume === 'number')\n\t\t\tthis.volume = playerOptions.volume;\n\t\tif (typeof playerOptions.position === 'number')\n\t\t\tthis.position = playerOptions.position;\n\t}\n\n\t/**\n\t * Cleans this player instance\n\t * @internal\n\t */\n\tpublic clean(): void {\n\t\tthis.removeAllListeners();\n\t\tthis.track = null;\n\t\tthis.volume = 100;\n\t\tthis.position = 0;\n\t\tthis.filters = {};\n\t}\n\n\t/**\n\t * Sends server update to lavalink\n\t * @internal\n\t */\n\tpublic async sendServerUpdate(connection: Connection): Promise<void> {\n\t\tconst playerUpdate = {\n\t\t\tguildId: this.guildId,\n\t\t\tplayerOptions: {\n\t\t\t\tvoice: {\n\t\t\t\t\ttoken: connection.serverUpdate!.token,\n\t\t\t\t\tendpoint: connection.serverUpdate!.endpoint,\n\t\t\t\t\tsessionId: connection.sessionId!\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tawait this.node.rest.updatePlayer(playerUpdate);\n\t}\n\n\t/**\n\t * Handle player update data\n\t */\n\tpublic onPlayerUpdate(json: PlayerUpdate): void {\n\t\tconst { position, ping } = json.state;\n\t\tthis.position = position;\n\t\tthis.ping = ping;\n\t\tthis.emit('update', json);\n\t}\n\n\t/**\n\t * Handle player events received from Lavalink\n\t * @param json JSON data from Lavalink\n\t * @internal\n\t */\n\tpublic onPlayerEvent(json: TrackStartEvent | TrackEndEvent | TrackStuckEvent | TrackExceptionEvent | WebSocketClosedEvent): void {\n\t\tswitch (json.type) {\n\t\t\tcase PlayerEventType.TRACK_START_EVENT:\n\t\t\t\tif (this.track) this.track = json.track.encoded;\n\t\t\t\tthis.emit('start', json);\n\t\t\t\tbreak;\n\t\t\tcase PlayerEventType.TRACK_END_EVENT:\n\t\t\t\tthis.emit('end', json);\n\t\t\t\tbreak;\n\t\t\tcase PlayerEventType.TRACK_STUCK_EVENT:\n\t\t\t\tthis.emit('stuck', json);\n\t\t\t\tbreak;\n\t\t\tcase PlayerEventType.TRACK_EXCEPTION_EVENT:\n\t\t\t\tthis.emit('exception', json);\n\t\t\t\tbreak;\n\t\t\tcase PlayerEventType.WEBSOCKET_CLOSED_EVENT:\n\t\t\t\tthis.emit('closed', json);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.node.manager.emit(\n\t\t\t\t\t'debug',\n\t\t\t\t\tthis.node.name,\n\t\t\t\t\t`[Player] -> [Node] : Unknown Player Event Type, Data => ${JSON.stringify(json)}`\n\t\t\t\t);\n\t\t}\n\t}\n}\n","import { Node, NodeInfo, Stats } from './Node';\nimport { NodeOption } from '../Shoukaku';\nimport { Versions } from '../Constants';\nimport { FilterOptions } from '../guild/Player';\n\nexport type Severity = 'common' | 'suspicious' | 'fault';\n\nexport enum LoadType {\n\tTRACK = 'track',\n\tPLAYLIST = 'playlist',\n\tSEARCH = 'search',\n\tEMPTY = 'empty',\n\tERROR = 'error'\n}\n\nexport interface Track {\n\tencoded: string;\n\tinfo: {\n\t\tidentifier: string;\n\t\tisSeekable: boolean;\n\t\tauthor: string;\n\t\tlength: number;\n\t\tisStream: boolean;\n\t\tposition: number;\n\t\ttitle: string;\n\t\turi?: string;\n\t\tartworkUrl?: string;\n\t\tisrc?: string;\n\t\tsourceName: string;\n\t};\n\tpluginInfo: unknown;\n}\n\nexport interface Playlist {\n\tencoded: string;\n\tinfo: {\n\t\tname: string;\n\t\tselectedTrack: number;\n\t};\n\tpluginInfo: unknown;\n\ttracks: Track[];\n}\n\nexport interface Exception {\n\tmessage: string;\n\tseverity: Severity;\n\tcause: string;\n}\n\nexport interface TrackResult {\n\tloadType: LoadType.TRACK;\n\tdata: Track;\n}\n\nexport interface PlaylistResult {\n\tloadType: LoadType.PLAYLIST;\n\tdata: Playlist;\n}\n\nexport interface SearchResult {\n\tloadType: LoadType.SEARCH;\n\tdata: Track[];\n}\n\nexport interface EmptyResult {\n\tloadType: LoadType.EMPTY;\n\tdata: Record<string, never>;\n}\n\nexport interface ErrorResult {\n\tloadType: LoadType.ERROR;\n\tdata: Exception;\n}\n\nexport type LavalinkResponse = TrackResult | PlaylistResult | SearchResult | EmptyResult | ErrorResult;\n\nexport interface Address {\n\taddress: string;\n\tfailingTimestamp: number;\n\tfailingTime: string;\n}\n\nexport interface RoutePlanner {\n\tclass: null | 'RotatingIpRoutePlanner' | 'NanoIpRoutePlanner' | 'RotatingNanoIpRoutePlanner' | 'BalancingIpRoutePlanner';\n\tdetails: null | {\n\t\tipBlock: {\n\t\t\ttype: string;\n\t\t\tsize: string;\n\t\t};\n\t\tfailingAddresses: Address[];\n\t\trotateIndex: string;\n\t\tipIndex: string;\n\t\tcurrentAddress: string;\n\t\tblockIndex: string;\n\t\tcurrentAddressIndex: string;\n\t};\n}\n\nexport interface LavalinkPlayerVoice {\n\ttoken: string;\n\tendpoint: string;\n\tsessionId: string;\n\tconnected?: boolean;\n\tping?: number;\n}\n\nexport type LavalinkPlayerVoiceOptions = Omit<LavalinkPlayerVoice, 'connected' | 'ping'>;\n\nexport interface LavalinkPlayer {\n\tguildId: string;\n\ttrack?: Track;\n\tvolume: number;\n\tpaused: boolean;\n\tvoice: LavalinkPlayerVoice;\n\tfilters: FilterOptions;\n}\n\nexport interface UpdatePlayerTrackOptions {\n\tencoded?: string | null;\n\tidentifier?: string;\n\tuserData?: unknown;\n}\n\nexport interface UpdatePlayerOptions {\n\ttrack?: UpdatePlayerTrackOptions;\n\tposition?: number;\n\tendTime?: number;\n\tvolume?: number;\n\tpaused?: boolean;\n\tfilters?: FilterOptions;\n\tvoice?: LavalinkPlayerVoiceOptions;\n}\n\nexport interface UpdatePlayerInfo {\n\tguildId: string;\n\tplayerOptions: UpdatePlayerOptions;\n\tnoReplace?: boolean;\n}\n\nexport interface SessionInfo {\n\tresumingKey?: string;\n\ttimeout: number;\n}\n\ninterface FetchOptions {\n\tendpoint: string;\n\toptions: {\n\t\theaders?: Record<string, string>;\n\t\tparams?: Record<string, string>;\n\t\tmethod?: string;\n\t\tbody?: Record<string, unknown>;\n\t\t[key: string]: unknown;\n\t};\n}\n\ninterface FinalFetchOptions {\n\tmethod: string;\n\theaders: Record<string, string>;\n\tsignal: AbortSignal;\n\tbody?: string;\n}\n\n/**\n * Wrapper around Lavalink REST API\n */\nexport class Rest {\n\t/**\n     * Node that initialized this instance\n     */\n\tprotected readonly node: Node;\n\t/**\n     * URL of Lavalink\n     */\n\tprotected readonly url: string;\n\t/**\n     * Credentials to access Lavalink\n     */\n\tprotected readonly auth: string;\n\t/**\n     * @param node An instance of Node\n     * @param options The options to initialize this rest class\n     * @param options.name Name of this node\n     * @param options.url URL of Lavalink\n     * @param options.auth Credentials to access Lavalnk\n     * @param options.secure Weather to use secure protocols or not\n     * @param options.group Group of this node\n     */\n\tconstructor(node: Node, options: NodeOption) {\n\t\tthis.node = node;\n\t\tthis.url = `${options.secure ? 'https' : 'http'}://${options.url}/v${Versions.REST_VERSION}`;\n\t\tthis.auth = options.auth;\n\t}\n\n\tprotected get sessionId(): string {\n\t\treturn this.node.sessionId!;\n\t}\n\n\t/**\n     * Resolve a track\n     * @param identifier Track ID\n     * @returns A promise that resolves to a Lavalink response\n     */\n\tpublic resolve(identifier: string): Promise<LavalinkResponse | undefined> {\n\t\tconst options = {\n\t\t\tendpoint: '/loadtracks',\n\t\t\toptions: { params: { identifier }}\n\t\t};\n\t\treturn this.fetch(options);\n\t}\n\n\t/**\n     * Decode a track\n     * @param track Encoded track\n     * @returns Promise that resolves to a track\n     */\n\tpublic decode(track: string): Promise<Track | undefined> {\n\t\tconst options = {\n\t\t\tendpoint: '/decodetrack',\n\t\t\toptions: { params: { track }}\n\t\t};\n\t\treturn this.fetch<Track>(options);\n\t}\n\n\t/**\n     * Gets all the player with the specified sessionId\n     * @returns Promise that resolves to an array of Lavalink players\n     */\n\tpublic async getPlayers(): Promise<LavalinkPlayer[]> {\n\t\tconst options = {\n\t\t\tendpoint: `/sessions/${this.sessionId}/players`,\n\t\t\toptions: {}\n\t\t};\n\t\treturn await this.fetch<LavalinkPlayer[]>(options) ?? [];\n\t}\n\n\t/**\n     * Gets the player with the specified guildId\n     * @returns Promise that resolves to a Lavalink player\n     */\n\tpublic getPlayer(guildId: string): Promise<LavalinkPlayer | undefined> {\n\t\tconst options = {\n\t\t\tendpoint: `/sessions/${this.sessionId}/players/${guildId}`,\n\t\t\toptions: {}\n\t\t};\n\t\treturn this.fetch(options);\n\t}\n\n\t/**\n     * Updates a Lavalink player\n     * @param data SessionId from Discord\n     * @returns Promise that resolves to a Lavalink player\n     */\n\tpublic updatePlayer(data: UpdatePlayerInfo): Promise<LavalinkPlayer | undefined> {\n\t\tconst options = {\n\t\t\tendpoint: `/sessions/${this.sessionId}/players/${data.guildId}`,\n\t\t\toptions: {\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\tparams: { noReplace: data.noReplace?.toString() ?? 'false' },\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: data.playerOptions as Record<string, unknown>\n\t\t\t}\n\t\t};\n\t\treturn this.fetch<LavalinkPlayer>(options);\n\t}\n\n\t/**\n     * Deletes a Lavalink player\n     * @param guildId guildId where this player is\n     */\n\tpublic async destroyPlayer(guildId: string): Promise<void> {\n\t\tconst options = {\n\t\t\tendpoint: `/sessions/${this.sessionId}/players/${guildId}`,\n\t\t\toptions: { method: 'DELETE' }\n\t\t};\n\t\tawait this.fetch(options);\n\t}\n\n\t/**\n     * Updates the session with a resume boolean and timeout\n     * @param resuming Whether resuming is enabled for this session or not\n     * @param timeout Timeout to wait for resuming\n     * @returns Promise that resolves to a Lavalink player\n     */\n\tpublic updateSession(resuming?: boolean, timeout?: number): Promise<SessionInfo | undefined> {\n\t\tconst options = {\n\t\t\tendpoint: `/sessions/${this.sessionId}`,\n\t\t\toptions: {\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: { resuming, timeout }\n\t\t\t}\n\t\t};\n\t\treturn this.fetch(options);\n\t}\n\n\t/**\n     * Gets the status of this node\n     * @returns Promise that resolves to a node stats response\n     */\n\tpublic stats(): Promise<Stats | undefined> {\n\t\tconst options = {\n\t\t\tendpoint: '/stats',\n\t\t\toptions: {}\n\t\t};\n\t\treturn this.fetch(options);\n\t}\n\n\t/**\n     * Get routeplanner status from Lavalink\n     * @returns Promise that resolves to a routeplanner response\n     */\n\tpublic getRoutePlannerStatus(): Promise<RoutePlanner | undefined> {\n\t\tconst options = {\n\t\t\tendpoint: '/routeplanner/status',\n\t\t\toptions: {}\n\t\t};\n\t\treturn this.fetch(options);\n\t}\n\n\t/**\n     * Release blacklisted IP address into pool of IPs\n     * @param address IP address\n     */\n\tpublic async unmarkFailedAddress(address: string): Promise<void> {\n\t\tconst options = {\n\t\t\tendpoint: '/routeplanner/free/address',\n\t\t\toptions: {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: { address }\n\t\t\t}\n\t\t};\n\t\tawait this.fetch(options);\n\t}\n\n\t/**\n     * Get Lavalink info\n     */\n\tpublic getLavalinkInfo(): Promise<NodeInfo | undefined> {\n\t\tconst options = {\n\t\t\tendpoint: '/info',\n\t\t\toptions: {\n\t\t\t\theaders: { 'Content-Type': 'application/json' }\n\t\t\t}\n\t\t};\n\t\treturn this.fetch(options);\n\t}\n\n\t/**\n     * Make a request to Lavalink\n     * @param fetchOptions.endpoint Lavalink endpoint\n     * @param fetchOptions.options Options passed to fetch\n     * @throws `RestError` when encountering a Lavalink error response\n     * @internal\n     */\n\tprotected async fetch<T = unknown>(fetchOptions: FetchOptions) {\n\t\tconst { endpoint, options } = fetchOptions;\n\t\tlet headers = {\n\t\t\t'Authorization': this.auth,\n\t\t\t'User-Agent': this.node.manager.options.userAgent\n\t\t};\n\n\t\tif (options.headers) headers = { ...headers, ...options.headers };\n\n\t\tconst url = new URL(`${this.url}${endpoint}`);\n\n\t\tif (options.params) url.search = new URLSearchParams(options.params).toString();\n\n\t\tconst abortController = new AbortController();\n\t\tconst timeout = setTimeout(() => abortController.abort(), this.node.manager.options.restTimeout * 1000);\n\n\t\tconst method = options.method?.toUpperCase() ?? 'GET';\n\n\t\tconst finalFetchOptions: FinalFetchOptions = {\n\t\t\tmethod,\n\t\t\theaders,\n\t\t\tsignal: abortController.signal\n\t\t};\n\n\t\tif (![ 'GET', 'HEAD' ].includes(method) && options.body)\n\t\t\tfinalFetchOptions.body = JSON.stringify(options.body);\n\n\t\tconst request = await fetch(url.toString(), finalFetchOptions)\n\t\t\t.finally(() => clearTimeout(timeout));\n\n\t\tif (!request.ok) {\n\t\t\tconst response = await request\n\t\t\t\t.json()\n\t\t\t\t.catch(() => null) as LavalinkRestError | null;\n\t\t\tthrow new RestError(response ?? {\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t\tstatus: request.status,\n\t\t\t\terror: 'Unknown Error',\n\t\t\t\tmessage: 'Unexpected error response from Lavalink server',\n\t\t\t\tpath: endpoint\n\t\t\t});\n\t\t}\n\t\ttry {\n\t\t\treturn await request.json() as T;\n\t\t} catch {\n\t\t\treturn;\n\t\t}\n\t}\n}\n\ninterface LavalinkRestError {\n\ttimestamp: number;\n\tstatus: number;\n\terror: string;\n\ttrace?: string;\n\tmessage: string;\n\tpath: string;\n}\n\nexport class RestError extends Error {\n\tpublic timestamp: number;\n\tpublic status: number;\n\tpublic error: string;\n\tpublic trace?: string;\n\tpublic path: string;\n\n\tconstructor({ timestamp, status, error, trace, message, path }: LavalinkRestError) {\n\t\tsuper(`Rest request failed with response code: ${status}${message ? ` | message: ${message}` : ''}`);\n\t\tthis.name = 'RestError';\n\t\tthis.timestamp = timestamp;\n\t\tthis.status = status;\n\t\tthis.error = error;\n\t\tthis.trace = trace;\n\t\tthis.message = message;\n\t\tthis.path = path;\n\t\tObject.setPrototypeOf(this, new.target.prototype);\n\t}\n}\n","import { IncomingMessage } from 'http';\nimport { NodeOption, Shoukaku, ShoukakuEvents } from '../Shoukaku';\nimport { OpCodes, ShoukakuClientInfo, State, Versions } from '../Constants';\nimport { TypedEventEmitter, wait } from '../Utils';\nimport { Rest } from './Rest';\nimport { PlayerUpdate, TrackEndEvent, TrackExceptionEvent, TrackStartEvent, TrackStuckEvent, WebSocketClosedEvent } from '../guild/Player';\nimport Websocket from 'ws';\n\nexport interface Ready {\n\top: OpCodes.READY;\n\tresumed: boolean;\n\tsessionId: string;\n}\n\nexport interface NodeMemory {\n\treservable: number;\n\tused: number;\n\tfree: number;\n\tallocated: number;\n}\n\nexport interface NodeFrameStats {\n\tsent: number;\n\tdeficit: number;\n\tnulled: number;\n}\n\nexport interface NodeCpu {\n\tcores: number;\n\tsystemLoad: number;\n\tlavalinkLoad: number;\n}\n\nexport interface Stats {\n\top: OpCodes.STATS;\n\tplayers: number;\n\tplayingPlayers: number;\n\tmemory: NodeMemory;\n\tframeStats: NodeFrameStats | null;\n\tcpu: NodeCpu;\n\tuptime: number;\n}\n\nexport interface NodeInfoVersion {\n\tsemver: string;\n\tmajor: number;\n\tminor: number;\n\tpatch: number;\n\tpreRelease?: string;\n\tbuild?: string;\n}\n\nexport interface NodeInfoGit {\n\tbranch: string;\n\tcommit: string;\n\tcommitTime: number;\n}\n\nexport interface NodeInfoPlugin {\n\tname: string;\n\tversion: string;\n}\n\nexport interface NodeInfo {\n\tversion: NodeInfoVersion;\n\tbuildTime: number;\n\tgit: NodeInfoGit;\n\tjvm: string;\n\tlavaplayer: string;\n\tsourceManagers: string[];\n\tfilters: string[];\n\tplugins: NodeInfoPlugin[];\n}\n\nexport interface ResumableHeaders {\n\t[key: string]: string;\n\t'Client-Name': string;\n\t'User-Agent': string;\n\t'Authorization': string;\n\t'User-Id': string;\n\t'Session-Id': string;\n}\n\nexport type NonResumableHeaders = Omit<ResumableHeaders, 'Session-Id'>;\n\nexport type NodeEvents = {\n\t[K in keyof ShoukakuEvents]: ShoukakuEvents[K] extends [unknown, ...infer R] ? R : never;\n};\n\n/**\n * Represents a Lavalink node\n */\nexport class Node extends TypedEventEmitter<NodeEvents> {\n\t/**\n     * Shoukaku class\n     */\n\tpublic readonly manager: Shoukaku;\n\t/**\n     * Lavalink rest API\n     */\n\tpublic readonly rest: Rest;\n\t/**\n     * Name of this node\n     */\n\tpublic readonly name: string;\n\t/**\n     * Group in which this node is contained\n     */\n\tpublic readonly group?: string;\n\t/**\n     * URL of Lavalink\n     */\n\tprivate readonly url: string;\n\t/**\n     * Credentials to access Lavalink\n     */\n\tprivate readonly auth: string;\n\t/**\n     * The number of reconnects to Lavalink\n     */\n\tpublic reconnects: number;\n\t/**\n     * The state of this connection\n     */\n\tpublic state: State;\n\t/**\n     * Statistics from Lavalink\n     */\n\tpublic stats: Stats | null;\n\t/**\n     * Information about lavalink node\n    */\n\tpublic info: NodeInfo | null;\n\t/**\n     * Websocket instance\n     */\n\tpublic ws: Websocket | null;\n\t/**\n     * SessionId of this Lavalink connection (not to be confused with Discord SessionId)\n     */\n\tpublic sessionId: string | null;\n\t/**\n     * Boolean that represents if the node has initialized once\n     */\n\tprotected initialized: boolean;\n\t/**\n     * Boolean that represents if this connection is destroyed\n     */\n\tprotected destroyed: boolean;\n\t/**\n     * @param manager Shoukaku instance\n     * @param options Options on creating this node\n     * @param options.name Name of this node\n     * @param options.url URL of Lavalink\n     * @param options.auth Credentials to access Lavalnk\n     * @param options.secure Whether to use secure protocols or not\n     * @param options.group Group of this node\n     */\n\tconstructor(manager: Shoukaku, options: NodeOption) {\n\t\tsuper();\n\t\tthis.manager = manager;\n\t\tthis.rest = new (this.manager.options.structures.rest ?? Rest)(this, options);\n\t\tthis.name = options.name;\n\t\tthis.group = options.group;\n\t\tthis.auth = options.auth;\n\t\tthis.url = `${options.secure ? 'wss' : 'ws'}://${options.url}/v${Versions.WEBSOCKET_VERSION}/websocket`;\n\t\tthis.reconnects = 0;\n\t\tthis.state = State.DISCONNECTED;\n\t\tthis.stats = null;\n\t\tthis.info = null;\n\t\tthis.ws = null;\n\t\tthis.sessionId = null;\n\t\tthis.initialized = false;\n\t\tthis.destroyed = false;\n\t}\n\n\t/**\n     * Penalties for load balancing\n     * @returns Penalty score\n     * @internal @readonly\n     */\n\tget penalties(): number {\n\t\tlet penalties = 0;\n\t\tif (!this.stats) return penalties;\n\n\t\tpenalties += this.stats.players;\n\t\tpenalties += Math.round(Math.pow(1.05, 100 * this.stats.cpu.systemLoad) * 10 - 10);\n\n\t\tif (this.stats.frameStats) {\n\t\t\tpenalties += this.stats.frameStats.deficit;\n\t\t\tpenalties += this.stats.frameStats.nulled * 2;\n\t\t}\n\n\t\treturn penalties;\n\t}\n\n\t/**\n     * If we should clean this node\n     * @internal @readonly\n     */\n\tprivate get shouldClean(): boolean {\n\t\treturn this.destroyed || this.reconnects >= this.manager.options.reconnectTries;\n\t}\n\n\t/**\n     * Connect to Lavalink\n     */\n\tpublic connect(): void {\n\t\tif (!this.manager.id) throw new Error('Don\\'t connect a node when the library is not yet ready');\n\t\tif (this.destroyed) throw new Error('You can\\'t re-use the same instance of a node once disconnected, please re-add the node again');\n\n\t\tthis.state = State.CONNECTING;\n\n\t\tconst headers: NonResumableHeaders | ResumableHeaders = {\n\t\t\t'Client-Name': ShoukakuClientInfo,\n\t\t\t'User-Agent': this.manager.options.userAgent,\n\t\t\t'Authorization': this.auth,\n\t\t\t'User-Id': this.manager.id\n\t\t};\n\n\t\tif (this.sessionId)\n\t\t\theaders['Session-Id'] = this.sessionId;\n\t\tif (!this.initialized)\n\t\t\tthis.initialized = true;\n\n\t\tthis.emit('debug', `[Socket] -> [${this.name}] : Connecting to ${this.url} ...`);\n\n\t\tconst url = new URL(this.url);\n\t\tthis.ws = new Websocket(url.toString(), { headers } as Websocket.ClientOptions);\n\n\t\tthis.ws.once('upgrade', response => this.open(response));\n\t\tthis.ws.once('close', (...args) => this.close(...args));\n\t\tthis.ws.on('error', error => this.error(error));\n\t\tthis.ws.on('message', data => void this.message(data).catch(error => this.error(error as Error)));\n\t}\n\n\t/**\n     * Disconnect from Lavalink\n     * @param code Status code\n     * @param reason Reason for disconnect\n     */\n\tpublic disconnect(code: number, reason?: string): void {\n\t\tthis.destroyed = true;\n\t\tthis.internalDisconnect(code, reason);\n\t}\n\n\t/**\n     * Handle connection open event from Lavalink\n     * @param response Response from Lavalink\n     * @internal\n     */\n\tprivate open(response: IncomingMessage): void {\n\t\tconst resumed = response.headers['session-resumed'];\n\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\tthis.emit('debug', `[Socket] <-> [${this.name}] : Connection Handshake Done! ${this.url} | Resumed Header Value: ${resumed}`);\n\t\tthis.reconnects = 0;\n\t\tthis.state = State.NEARLY;\n\t}\n\n\t/**\n     * Handle message from Lavalink\n     * @param message JSON message\n     * @internal\n     */\n\tprivate async message(message: unknown): Promise<void> {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\tconst json: Ready | Stats | PlayerUpdate | TrackStartEvent | TrackEndEvent | TrackStuckEvent | TrackExceptionEvent | WebSocketClosedEvent = JSON.parse(message as string);\n\t\tif (!json) return;\n\t\tthis.emit('raw', json);\n\t\tswitch (json.op) {\n\t\t\tcase OpCodes.STATS:\n\t\t\t\tthis.emit('debug', `[Socket] <- [${this.name}] : Node Status Update | Server Load: ${this.penalties}`);\n\t\t\t\tthis.stats = json;\n\t\t\t\tbreak;\n\t\t\tcase OpCodes.READY: {\n\t\t\t\tif (!json.sessionId) {\n\t\t\t\t\tthis.emit('debug', `[Socket] -> [${this.name}] : No session id found from ready op? disconnecting and reconnecting to avoid issues`);\n\t\t\t\t\treturn this.internalDisconnect(1000);\n\t\t\t\t}\n\n\t\t\t\tthis.sessionId = json.sessionId;\n\n\t\t\t\tconst players = [ ...this.manager.players.values() ].filter(player => player.node.name === this.name);\n\n\t\t\t\tlet resumedByLibrary = false;\n\t\t\t\tif (!json.resumed && Boolean(this.initialized && (players.length && this.manager.options.resumeByLibrary))) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.resumePlayers();\n\t\t\t\t\t\tresumedByLibrary = true;\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.error(error as Error);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.state = State.CONNECTED;\n\t\t\t\tthis.emit('debug', `[Socket] -> [${this.name}] : Lavalink is ready! | Lavalink resume: ${json.resumed} | Lib resume: ${resumedByLibrary}`);\n\t\t\t\tthis.emit('ready', json.resumed, resumedByLibrary);\n\n\t\t\t\tif (this.manager.options.resume) {\n\t\t\t\t\tawait this.rest.updateSession(this.manager.options.resume, this.manager.options.resumeTimeout);\n\t\t\t\t\tthis.emit('debug', `[Socket] -> [${this.name}] : Resuming configured!`);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase OpCodes.EVENT:\n\t\t\tcase OpCodes.PLAYER_UPDATE: {\n\t\t\t\tconst player = this.manager.players.get(json.guildId);\n\t\t\t\tif (!player) return;\n\t\t\t\tif (json.op === OpCodes.EVENT)\n\t\t\t\t\tplayer.onPlayerEvent(json);\n\t\t\t\telse\n\t\t\t\t\tplayer.onPlayerUpdate(json);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthis.emit('debug', `[Player] -> [Node] : Unknown Message Op, Data => ${JSON.stringify(json)}`);\n\t\t}\n\t}\n\n\t/**\n     * Handle closed event from lavalink\n     * @param code Status close\n     * @param reason Reason for connection close\n     */\n\tprivate close(code: number, reason: Buffer): void {\n\t\tthis.emit('debug', `[Socket] <-/-> [${this.name}] : Connection Closed, Code: ${code || 'Unknown Code'}`);\n\t\tthis.emit('close', code, String(reason));\n\t\tif (this.shouldClean)\n\t\t\tvoid this.clean();\n\t\telse\n\t\t\tvoid this.reconnect();\n\t}\n\n\t/**\n     * To emit error events easily\n     * @param error error message\n     */\n\tpublic error(error: Error): void {\n\t\tthis.emit('error', error);\n\t}\n\n\t/**\n     * Internal disconnect function\n     * @internal\n     */\n\tprivate internalDisconnect(code: number, reason?: string): void {\n\t\tif (this.destroyed) return;\n\n\t\tthis.state = State.DISCONNECTING;\n\n\t\tif (this.ws)\n\t\t\tthis.ws.close(code, reason);\n\t\telse\n\t\t\tvoid this.clean();\n\t}\n\n\t/**\n     * Destroys the websocket connection\n     * @internal\n     */\n\tprivate destroy(count = 0): void {\n\t\tthis.ws?.removeAllListeners();\n\t\tthis.ws?.close();\n\t\tthis.ws = null;\n\t\tthis.state = State.DISCONNECTED;\n\t\tif (!this.manager.options.resume) {\n\t\t\tthis.sessionId = null;\n\t\t}\n\t\tif (this.shouldClean) {\n\t\t\tthis.destroyed = true;\n\t\t\tthis.sessionId = null;\n\t\t\tthis.emit('disconnect', count);\n\t\t}\n\t}\n\n\t/**\n     * Cleans and moves players to other nodes if possible\n     * @internal\n     */\n\tprivate async clean(): Promise<void> {\n\t\tconst move = this.manager.options.moveOnDisconnect;\n\t\tif (!move) return this.destroy();\n\t\tlet count = 0;\n\t\ttry {\n\t\t\tcount = await this.movePlayers();\n\t\t} catch (error) {\n\t\t\tthis.error(error as Error);\n\t\t} finally {\n\t\t\tthis.destroy(count);\n\t\t}\n\t}\n\n\t/**\n     * Reconnect to Lavalink\n     * @internal\n     */\n\tprivate async reconnect(): Promise<void> {\n\t\tif (this.state === State.RECONNECTING) return;\n\t\tif (this.state !== State.DISCONNECTED) this.destroy();\n\t\tthis.state = State.RECONNECTING;\n\t\tthis.reconnects++;\n\t\tthis.emit('reconnecting', this.manager.options.reconnectTries - this.reconnects, this.manager.options.reconnectInterval);\n\t\tthis.emit('debug', `[Socket] -> [${this.name}] : Reconnecting in ${this.manager.options.reconnectInterval} seconds. ${this.manager.options.reconnectTries - this.reconnects} tries left`);\n\t\tawait wait(this.manager.options.reconnectInterval * 1000);\n\t\tthis.connect();\n\t}\n\n\t/**\n     * Tries to resume the players internally\n     * @internal\n     */\n\tprivate async resumePlayers(): Promise<void> {\n\t\tconst playersWithData = [];\n\t\tconst playersWithoutData = [];\n\n\t\tfor (const player of this.manager.players.values()) {\n\t\t\tconst serverUpdate = this.manager.connections.get(player.guildId)?.serverUpdate;\n\t\t\tif (serverUpdate)\n\t\t\t\tplayersWithData.push(player);\n\t\t\telse\n\t\t\t\tplayersWithoutData.push(player);\n\t\t}\n\n\t\tawait Promise.allSettled([\n\t\t\t...playersWithData.map(player => player.resume()),\n\t\t\t...playersWithoutData.map(player => this.manager.leaveVoiceChannel(player.guildId))\n\t\t]);\n\t}\n\n\t/**\n     * Tries to move the players to another node\n     * @internal\n     */\n\tprivate async movePlayers(): Promise<number> {\n\t\tconst players = [ ...this.manager.players.values() ];\n\t\tconst data = await Promise.allSettled(players.map(player => player.move()));\n\t\treturn data.filter(results => results.status === 'fulfilled').length;\n\t}\n}\n","import { ShoukakuDefaults, VoiceState } from './Constants';\nimport { Node, NodeEvents } from './node/Node';\nimport { Connector } from './connectors/Connector';\nimport { Constructor, mergeDefault, TypedEventEmitter } from './Utils';\nimport { Player } from './guild/Player';\nimport { Rest } from './node/Rest';\nimport { Connection } from './guild/Connection';\n\nexport interface Structures {\n\t/**\n     * A custom structure that extends the Rest class\n     */\n\trest?: Constructor<Rest>;\n\t/**\n     * A custom structure that extends the Player class\n     */\n\tplayer?: Constructor<Player>;\n}\n\nexport interface NodeOption {\n\t/**\n     * Name of the Lavalink node\n     */\n\tname: string;\n\t/**\n     * Lavalink node host and port without any prefix\n     */\n\turl: string;\n\t/**\n     * Credentials to access Lavalink\n     */\n\tauth: string;\n\t/**\n     * Whether to use secure protocols or not\n     */\n\tsecure?: boolean;\n\t/**\n     * Name of the Lavalink node group\n     */\n\tgroup?: string;\n}\n\nexport interface ShoukakuOptions {\n\t/**\n     * Whether to resume a connection on disconnect to Lavalink (Server Side) (Note: DOES NOT RESUME WHEN THE LAVALINK SERVER DIES)\n     */\n\tresume?: boolean;\n\t/**\n     * Time to wait before lavalink starts to destroy the players of the disconnected client\n     */\n\tresumeTimeout?: number;\n\t/**\n     * Whether to resume the players by doing it in the library side (Client Side) (Note: TRIES TO RESUME REGARDLESS OF WHAT HAPPENED ON A LAVALINK SERVER)\n     */\n\tresumeByLibrary?: boolean;\n\t/**\n     * Number of times to try and reconnect to Lavalink before giving up\n     */\n\treconnectTries?: number;\n\t/**\n     * Timeout before trying to reconnect\n     */\n\treconnectInterval?: number;\n\t/**\n     * Time to wait for a response from the Lavalink REST API before giving up\n     */\n\trestTimeout?: number;\n\t/**\n     * Whether to move players to a different Lavalink node when a node disconnects\n     */\n\tmoveOnDisconnect?: boolean;\n\t/**\n     * User Agent to use when making requests to Lavalink\n     */\n\tuserAgent?: string;\n\t/**\n     * Custom structures for shoukaku to use\n     */\n\tstructures?: Structures;\n\t/**\n     * Timeout before abort connection\n     */\n\tvoiceConnectionTimeout?: number;\n\t/**\n     * Node Resolver to use if you want to customize it\n     */\n\tnodeResolver?: (nodes: Map<string, Node>, connection?: Connection) => Node | undefined;\n}\n\nexport interface VoiceChannelOptions {\n\tguildId: string;\n\tshardId: number;\n\tchannelId: string;\n\tdeaf?: boolean;\n\tmute?: boolean;\n}\n\n// Interfaces are not final, but types are, and therefore has an index signature\n// https://stackoverflow.com/a/64970740\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport type ShoukakuEvents = {\n\t/**\n     * Emitted when reconnect tries are occurring and how many tries are left\n     * @eventProperty\n     */\n\t'reconnecting': [name: string, reconnectsLeft: number, reconnectInterval: number];\n\t/**\n     * Emitted when data useful for debugging is produced\n     * @eventProperty\n     */\n\t'debug': [name: string, info: string];\n\t/**\n     * Emitted when an error occurs\n     * @eventProperty\n     */\n\t'error': [name: string, error: Error];\n\t/**\n     * Emitted when Shoukaku is ready to receive operations\n     * @eventProperty\n     */\n\t'ready': [name: string, lavalinkResume: boolean, libraryResume: boolean];\n\t/**\n     * Emitted when a websocket connection to Lavalink closes\n     * @eventProperty\n     */\n\t'close': [name: string, code: number, reason: string];\n\t/**\n     * Emitted when a websocket connection to Lavalink disconnects\n     * @eventProperty\n     */\n\t'disconnect': [name: string, count: number];\n\t/**\n     * Emitted when a raw message is received from Lavalink\n     * @eventProperty\n     */\n\t'raw': [name: string, json: unknown];\n};\n\n/**\n * Main Shoukaku class\n */\nexport class Shoukaku extends TypedEventEmitter<ShoukakuEvents> {\n\t/**\n     * Discord library connector\n     */\n\tpublic readonly connector: Connector;\n\t/**\n     * Shoukaku options\n     */\n\tpublic readonly options: Required<ShoukakuOptions>;\n\t/**\n     * Connected Lavalink nodes\n     */\n\tpublic readonly nodes: Map<string, Node>;\n\t/**\n     * Voice connections being handled\n     */\n\tpublic readonly connections: Map<string, Connection>;\n\t/**\n     * Players being handled\n     */\n\tpublic readonly players: Map<string, Player>;\n\t/**\n     * Shoukaku instance identifier\n     */\n\tpublic id: string | null;\n\t/**\n     * @param connector A Discord library connector\n     * @param nodes An array that conforms to the NodeOption type that specifies nodes to connect to\n     * @param options Options to pass to create this Shoukaku instance\n     * @param options.resume Whether to resume a connection on disconnect to Lavalink (Server Side) (Note: DOES NOT RESUME WHEN THE LAVALINK SERVER DIES)\n     * @param options.resumeTimeout Time to wait before lavalink starts to destroy the players of the disconnected client\n     * @param options.resumeByLibrary Whether to resume the players by doing it in the library side (Client Side) (Note: TRIES TO RESUME REGARDLESS OF WHAT HAPPENED ON A LAVALINK SERVER)\n     * @param options.reconnectTries Number of times to try and reconnect to Lavalink before giving up\n     * @param options.reconnectInterval Timeout before trying to reconnect\n     * @param options.restTimeout Time to wait for a response from the Lavalink REST API before giving up\n     * @param options.moveOnDisconnect Whether to move players to a different Lavalink node when a node disconnects\n     * @param options.userAgent User Agent to use when making requests to Lavalink\n     * @param options.structures Custom structures for shoukaku to use\n     * @param options.nodeResolver Used if you have custom lavalink node resolving\n     */\n\tconstructor(connector: Connector, nodes: NodeOption[], options: ShoukakuOptions = {}) {\n\t\tsuper();\n\t\tthis.connector = connector.set(this);\n\t\tthis.options = mergeDefault<ShoukakuOptions>(ShoukakuDefaults, options);\n\t\tthis.nodes = new Map();\n\t\tthis.connections = new Map();\n\t\tthis.players = new Map();\n\t\tthis.id = null;\n\t\tthis.connector.listen(nodes);\n\t}\n\n\t/**\n     * Gets an ideal node based on the nodeResolver you provided\n     * @param connection Optional connection class for ideal node selection, if you use it\n     * @returns An ideal node for you to do things with\n     */\n\tpublic getIdealNode(connection?: Connection): Node | undefined {\n\t\treturn this.options.nodeResolver(this.nodes, connection);\n\t}\n\n\t/**\n     * Add a Lavalink node to the pool of available nodes\n     * @param options.name Name of this node\n     * @param options.url URL of Lavalink\n     * @param options.auth Credentials to access Lavalnk\n     * @param options.secure Whether to use secure protocols or not\n     * @param options.group Group of this node\n     */\n\tpublic addNode(options: NodeOption): void {\n\t\tconst node = new Node(this, options);\n\t\tnode.on('debug', (...args) => this.emit('debug', node.name, ...args));\n\t\tnode.on('reconnecting', (...args) => this.emit('reconnecting', node.name, ...args));\n\t\tnode.on('error', (...args) => this.emit('error', node.name, ...args));\n\t\tnode.on('close', (...args) => this.emit('close', node.name, ...args));\n\t\tnode.on('ready', (...args) => this.emit('ready', node.name, ...args));\n\t\tnode.on('raw', (...args) => this.emit('raw', node.name, ...args));\n\t\tnode.once('disconnect', (...args) => this.clean(node, ...args));\n\t\tnode.connect();\n\t\tthis.nodes.set(node.name, node);\n\t}\n\n\t/**\n     * Remove a Lavalink node from the pool of available nodes\n     * @param name Name of the node\n     * @param reason Reason of removing the node\n     */\n\tpublic removeNode(name: string, reason = 'Remove node executed'): void {\n\t\tconst node = this.nodes.get(name);\n\t\tif (!node) throw new Error('The node name you specified doesn\\'t exist');\n\t\tnode.disconnect(1000, reason);\n\t}\n\n\t/**\n     * Joins a voice channel\n     * @param options.guildId GuildId in which the ChannelId of the voice channel is located\n     * @param options.shardId ShardId to track where this should send on sharded websockets, put 0 if you are unsharded\n     * @param options.channelId ChannelId of the voice channel you want to connect to\n     * @param options.deaf Optional boolean value to specify whether to deafen or undeafen the current bot user\n     * @param options.mute Optional boolean value to specify whether to mute or unmute the current bot user\n     * @returns The created player\n     */\n\tpublic async joinVoiceChannel(options: VoiceChannelOptions): Promise<Player> {\n\t\tif (this.connections.has(options.guildId))\n\t\t\tthrow new Error('This guild already have an existing connection');\n\t\tconst connection = new Connection(this, options);\n\t\tthis.connections.set(connection.guildId, connection);\n\t\ttry {\n\t\t\tawait connection.connect();\n\t\t} catch (error) {\n\t\t\tthis.connections.delete(options.guildId);\n\t\t\tthrow error;\n\t\t}\n\t\ttry {\n\t\t\tconst node = this.getIdealNode(connection);\n\t\t\tif (!node)\n\t\t\t\tthrow new Error('Can\\'t find any nodes to connect on');\n\t\t\tconst player = this.options.structures.player ? new this.options.structures.player(connection.guildId, node) : new Player(connection.guildId, node);\n\t\t\tconst onUpdate = (state: VoiceState) => {\n\t\t\t\tif (state !== VoiceState.SESSION_READY) return;\n\t\t\t\tvoid player.sendServerUpdate(connection);\n\t\t\t};\n\t\t\tawait player.sendServerUpdate(connection);\n\t\t\tconnection.on('connectionUpdate', onUpdate);\n\t\t\tthis.players.set(player.guildId, player);\n\t\t\treturn player;\n\t\t} catch (error) {\n\t\t\tconnection.disconnect();\n\t\t\tthis.connections.delete(options.guildId);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n     * Leaves a voice channel\n     * @param guildId The id of the guild you want to delete\n     * @returns The destroyed / disconnected player or undefined if none\n     */\n\tpublic async leaveVoiceChannel(guildId: string): Promise<void> {\n\t\tconst connection = this.connections.get(guildId);\n\t\tif (connection) {\n\t\t\tconnection.disconnect();\n\t\t\tthis.connections.delete(guildId);\n\t\t}\n\t\tconst player = this.players.get(guildId);\n\t\tif (player) {\n\t\t\ttry {\n\t\t\t\tawait player.destroy();\n\t\t\t} catch { /* empty */ }\n\t\t\tplayer.clean();\n\t\t\tthis.players.delete(guildId);\n\t\t}\n\t}\n\n\t/**\n     * Cleans the disconnected lavalink node\n     * @param node The node to clean\n     * @param args Additional arguments for Shoukaku to emit\n     * @returns A Lavalink node or undefined\n     * @internal\n     */\n\tprivate clean(node: Node, ...args: NodeEvents['disconnect']): void {\n\t\tnode.removeAllListeners();\n\t\tthis.nodes.delete(node.name);\n\t\tthis.emit('disconnect', node.name, ...args);\n\t}\n}\n"],"mappings":"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","names":["State","VoiceState","OpCodes","import_events","PlayerEventType","node","LoadType","Websocket"]}